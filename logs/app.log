Watching for file changes with StatReloader

def backend_cleanup():
    return 1


def debug_task(self):
    return 1


def xstarmap(task, it):
    return 1


def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1


def accumulate(self, *args, **kwargs):
    return 1


def chunks(task, it, n):
    return 1


def update_price_list():
    return 1


def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1


def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1


def xmap(task, it):
    return 1


def chain(*args, **kwargs):
    return 1


def backend_cleanup():
    return 1


def xstarmap(task, it):
    return 1


def update_price_list():
    return 1


def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1


def accumulate(self, *args, **kwargs):
    return 1


def chunks(task, it, n):
    return 1


def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1


def debug_task(self):
    return 1


def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1


def xmap(task, it):
    return 1


def chain(*args, **kwargs):
    return 1

| Worker: Preparing bootsteps.
| Worker: Building graph...
| Worker: New boot order: {StateDB, Beat, Timer, Hub, Pool, Autoscaler, Consumer}
| Consumer: Preparing bootsteps.
| Consumer: Building graph...
| Consumer: New boot order: {Connection, Agent, Events, Heart, Mingle, Tasks, Control, Gossip, event loop}
| Worker: Starting Beat
^-- substep ok
| Worker: Starting Pool
^-- substep ok
| Worker: Starting Consumer
| Consumer: Starting Connection
/home/haseeb/.local/lib/python3.10/site-packages/celery/worker/consumer/consumer.py:507: CPendingDeprecationWarning: The broker_connection_retry configuration setting will no longer determine
whether broker connection retries are made during startup in Celery 6.0 and above.
If you wish to retain the existing behavior for retrying connections on startup,
you should set broker_connection_retry_on_startup to True.
  warnings.warn(

Connected to memory://localhost//
^-- substep ok
| Consumer: Starting Events
/home/haseeb/.local/lib/python3.10/site-packages/celery/worker/consumer/consumer.py:507: CPendingDeprecationWarning: The broker_connection_retry configuration setting will no longer determine
whether broker connection retries are made during startup in Celery 6.0 and above.
If you wish to retain the existing behavior for retrying connections on startup,
you should set broker_connection_retry_on_startup to True.
  warnings.warn(

^-- substep ok
| Consumer: Starting Heart
^-- substep ok
Timer wake-up! Next ETA 1.0 secs.
| Consumer: Starting Tasks
^-- substep ok
| Consumer: Starting Control
^-- substep ok
| Consumer: Starting event loop
celery@haseeb-Dev ready.
basic.qos: prefetch_count->32
beat: Starting...
Timer wake-up! Next ETA 0.9974125040007493 secs.
Current schedule:
<ScheduleEntry: update_prices_every_30_seconds crypto_prices.tasks.update_price_list() <freq: 30.00 seconds>
<ScheduleEntry: celery.backend_cleanup celery.backend_cleanup() <crontab: 0 4 * * * (m/h/dM/MY/d)>
beat: Ticking with max interval->5.00 minutes
Scheduler: Sending due task update_prices_every_30_seconds (crypto_prices.tasks.update_price_list)
beat: Synchronizing schedule...
crypto_prices.tasks.update_price_list sent. id->3b4d9475-766b-4df8-ab4a-c18adb983bf4
beat: Waking up in 29.98 seconds.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9985346359999312 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9985031589994833 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9985601950002092 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9986951189994215 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9985008809999272 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9995042740001736 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9984872850000102 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9985283850000997 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9985404600001857 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9987724319998961 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9987988540005972 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9985335510000368 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9985328869997829 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.998563858000125 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9985484250000809 secs.
Scheduler: Sending due task update_prices_every_30_seconds (crypto_prices.tasks.update_price_list)
crypto_prices.tasks.update_price_list sent. id->2a617cb5-704f-47c6-b25b-4a180da29026
beat: Waking up in 29.99 seconds.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9992140009999275 secs.
Timer wake-up! Next ETA 1.0 secs.
Watching for file changes with StatReloader
Timer wake-up! Next ETA 0.9984545399993294 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9985645149999982 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9986007090001294 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9995884580002894 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9985915319994092 secs.
Timer wake-up! Next ETA 1.0 secs.
Starting new HTTPS connection (1): api.coingecko.com:443
Timer wake-up! Next ETA 0.999092353999913 secs.
https://api.coingecko.com:443 "GET /api/v3/simple/price?ids=bitcoin,solana,ethereum&vs_currencies=usd HTTP/1.1" 200 None
Not Found: /favicon.ico
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9984847649993753 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9992893660000846 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9985898109998743 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9987770049992832 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9984909069999048 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9989728130003641 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9986247970000477 secs.
Timer wake-up! Next ETA 1.0 secs.
Scheduler: Sending due task update_prices_every_30_seconds (crypto_prices.tasks.update_price_list)
crypto_prices.tasks.update_price_list sent. id->d1d45748-1dba-460f-b77a-e4e9ef0d2bad
Timer wake-up! Next ETA 0.9990256729997782 secs.
beat: Waking up in 29.99 seconds.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9986239720001322 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.999203115000455 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9986072540004898 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9986428639995211 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9985482590000174 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9992402979996768 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9985181490001196 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.999212728999737 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9988773129998663 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.998409177999747 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9985235879994434 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9987027719998878 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.998494935999588 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9989314570002534 secs.
Timer wake-up! Next ETA 1.0 secs.
Scheduler: Sending due task update_prices_every_30_seconds (crypto_prices.tasks.update_price_list)
crypto_prices.tasks.update_price_list sent. id->dbbb010b-dd20-4ceb-b8b3-9fed540151a8
beat: Waking up in 29.99 seconds.
Timer wake-up! Next ETA 0.9985487300000386 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9988555499994618 secs.
/home/haseeb/crypto_prices_project/crypto_prices/views.py changed, reloading.
Timer wake-up! Next ETA 1.0 secs.
Watching for file changes with StatReloader
Timer wake-up! Next ETA 0.9986730549999265 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9984634329994151 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9982313040000008 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.998511872000563 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9992127589994197 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9983857950001038 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9983428220002679 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9986308070001542 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9987098510000578 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.998854537000625 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9985894299998108 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9986620259996926 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9982756720000907 secs.
Timer wake-up! Next ETA 1.0 secs.
Scheduler: Sending due task update_prices_every_30_seconds (crypto_prices.tasks.update_price_list)
crypto_prices.tasks.update_price_list sent. id->341a7cc7-d407-4f79-ac27-79dd056d6dd9
beat: Waking up in 29.99 seconds.
Timer wake-up! Next ETA 0.9990361869995468 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9985599179999554 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9984979319997365 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9986719580001591 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9984865460000947 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9976870020000206 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9987317710001662 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9986350879999009 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.998454316999414 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9989506580004672 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9991259100006573 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9985538900000392 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9986334430004717 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.998552906000441 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9984784919997765 secs.
Timer wake-up! Next ETA 1.0 secs.
Scheduler: Sending due task update_prices_every_30_seconds (crypto_prices.tasks.update_price_list)
crypto_prices.tasks.update_price_list sent. id->89893f60-2ed1-4d1a-a168-13152b91d21a
beat: Waking up in 29.99 seconds.
Timer wake-up! Next ETA 0.9983409879996543 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.998775129999558 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9984196440000233 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.998457153000345 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9984780909999245 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9985249740002473 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9993395609999425 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9984796919998189 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9989047510007367 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9988079909999215 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9987212779997208 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9985792600000423 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9987064619999728 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9986016389993893 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9987373740004841 secs.
Timer wake-up! Next ETA 1.0 secs.
beat: Synchronizing schedule...
Scheduler: Sending due task update_prices_every_30_seconds (crypto_prices.tasks.update_price_list)
crypto_prices.tasks.update_price_list sent. id->22ba9f2d-cef2-46e7-a11c-a14828d08ac6
beat: Waking up in 29.99 seconds.
Timer wake-up! Next ETA 0.99849597299999 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9988815940005225 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9987375360005899 secs.
Timer wake-up! Next ETA 1.0 secs.
/home/haseeb/crypto_prices_project/crypto_prices/views.py changed, reloading.
Timer wake-up! Next ETA 0.9986314849993505 secs.
Watching for file changes with StatReloader
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9987809760004893 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9986851459998434 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9985697649999565 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9986686700003702 secs.
/home/haseeb/crypto_prices_project/crypto_prices/views.py changed, reloading.
Timer wake-up! Next ETA 1.0 secs.
Watching for file changes with StatReloader
Timer wake-up! Next ETA 0.9987632439997469 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9988096099996255 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9985271929999726 secs.
/home/haseeb/crypto_prices_project/crypto_prices/views.py changed, reloading.
Watching for file changes with StatReloader
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9987545909998516 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9985782969997672 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.999629781999829 secs.
Timer wake-up! Next ETA 1.0 secs.
Starting new HTTPS connection (1): api.coingecko.com:443
Timer wake-up! Next ETA 0.9985664179994274 secs.
https://api.coingecko.com:443 "GET /api/v3/simple/price?ids=bitcoin,solana,ethereum&vs_currencies=usd HTTP/1.1" 200 None
Starting new HTTPS connection (1): api.coingecko.com:443
https://api.coingecko.com:443 "GET /api/v3/simple/price?ids=bitcoin,solana,ethereum&vs_currencies=usd HTTP/1.1" 200 None
Timer wake-up! Next ETA 1.0 secs.
Scheduler: Sending due task update_prices_every_30_seconds (crypto_prices.tasks.update_price_list)
crypto_prices.tasks.update_price_list sent. id->aed45a1b-cad9-4dbc-b78e-d4c1c54a67c8
beat: Waking up in 29.99 seconds.
Timer wake-up! Next ETA 0.9985362779998468 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.99870506499974 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9982154340004854 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.998880631999782 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9987489169998298 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9988454530002855 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.998508308000055 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9989743280002585 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9985048930002449 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9987837689996013 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9992085419999057 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9986753060002229 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9984326149997287 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9987081680001211 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9990547999996124 secs.
Timer wake-up! Next ETA 1.0 secs.
Scheduler: Sending due task update_prices_every_30_seconds (crypto_prices.tasks.update_price_list)
crypto_prices.tasks.update_price_list sent. id->eda151c1-00e7-4c91-9ed9-5a39cadf925a
beat: Waking up in 29.99 seconds.
Timer wake-up! Next ETA 0.9985480370005462 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.99880260000009 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9987619160001486 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9985442839997631 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9984746980007912 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9986714110000321 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9987842399996225 secs.
/home/haseeb/crypto_prices_project/crypto_prices_project/celery.py changed, reloading.
Timer wake-up! Next ETA 1.0 secs.
Watching for file changes with StatReloader
Timer wake-up! Next ETA 0.9987295529999756 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9985065060000125 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9985734390002108 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9988284490000297 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9986698449993128 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9984712430004947 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9988259199999447 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9985467319993404 secs.
Timer wake-up! Next ETA 1.0 secs.
Scheduler: Sending due task update_prices_every_30_seconds (crypto_prices.tasks.update_price_list)
crypto_prices.tasks.update_price_list sent. id->9774d390-ddd4-488b-a02d-ef1dd7ad8299
beat: Waking up in 29.99 seconds.
Timer wake-up! Next ETA 0.9991811680001774 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9987150570004815 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9987850429997707 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9985781379991749 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9984858799998619 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9990004010005578 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9990282359995035 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9985885669993877 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9988404579999042 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9988039609997941 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9986639629996716 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9994038269996963 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9986055910003415 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9983834880003997 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9991578930003016 secs.
Timer wake-up! Next ETA 1.0 secs.
Scheduler: Sending due task update_prices_every_30_seconds (crypto_prices.tasks.update_price_list)
crypto_prices.tasks.update_price_list sent. id->ae30d324-60ef-4e7f-88b8-985994dabc23
beat: Waking up in 29.99 seconds.
Timer wake-up! Next ETA 0.9984930390000955 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9985929869999381 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9985536920003142 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.998190297000292 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9983557569994446 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9995613269993555 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9984433390000049 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9991338840000026 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.998206147000019 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9993819410001379 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.998590877999959 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9985923790000015 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9985461440001018 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9985702699996182 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9985083889996531 secs.
Timer wake-up! Next ETA 1.0 secs.
Scheduler: Sending due task update_prices_every_30_seconds (crypto_prices.tasks.update_price_list)
crypto_prices.tasks.update_price_list sent. id->80af879b-ffc0-48b2-ae31-7756748fc4ec
beat: Waking up in 29.99 seconds.
Timer wake-up! Next ETA 0.9984943180006667 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9986068869993687 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9986916190000557 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.998843298999418 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9987788569997065 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9994613259996186 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9985110979996534 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9988324910000301 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9985481280000386 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9988138819999222 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9986012209992623 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9988645209996321 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9987223670004823 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9986964210002043 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.998818005999965 secs.
Timer wake-up! Next ETA 1.0 secs.
beat: Synchronizing schedule...
Scheduler: Sending due task update_prices_every_30_seconds (crypto_prices.tasks.update_price_list)
crypto_prices.tasks.update_price_list sent. id->b2cc7686-7857-4d05-a370-00ac327593ff
beat: Waking up in 29.99 seconds.
Timer wake-up! Next ETA 0.9985606500003996 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.998594423999748 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.998404130000381 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9983294300000125 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9982202310002322 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9986151260000042 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9992682539996167 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9982997389997763 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9988155350001762 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9985365259999526 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9984488410000267 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9990550860002259 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9983515550002267 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9986032770002566 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9990795069998057 secs.
Scheduler: Sending due task update_prices_every_30_seconds (crypto_prices.tasks.update_price_list)
crypto_prices.tasks.update_price_list sent. id->34390489-8f77-4b6c-9089-a2243a659d8b
beat: Waking up in 29.99 seconds.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.999637537000126 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9987448900001255 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9985912239999379 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9988814379994437 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9984042629994292 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9986828139999488 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9985075069998857 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9985375790001854 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9985267560005013 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9995748869996532 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.998603135999474 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9984436650001953 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9985438550002073 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9991864659996281 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9985079059997588 secs.
Scheduler: Sending due task update_prices_every_30_seconds (crypto_prices.tasks.update_price_list)
crypto_prices.tasks.update_price_list sent. id->77ab9d12-d7b9-4c36-879f-66b82ffaaea7
beat: Waking up in 29.99 seconds.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.998721451000165 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9986828480004988 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9992030510002223 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.99911835399962 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9985813480006982 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9985905579997052 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9987255039995944 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9985740770007396 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.998469837999437 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9984788250003476 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9984075920001487 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9983895060004215 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9983201609993557 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9985191719997601 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9985189959998024 secs.
Scheduler: Sending due task update_prices_every_30_seconds (crypto_prices.tasks.update_price_list)
crypto_prices.tasks.update_price_list sent. id->cc3bbd57-68e5-4367-907e-7e772e24f153
beat: Waking up in 29.99 seconds.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9985575230002723 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9985491159995945 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9986963510000351 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9985907589998533 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9984489600001325 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9985754689996611 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9985257809994437 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9986983889994008 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9986304499998369 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9989708590001101 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9988605079997797 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9994635990005918 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9988370840001153 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9990101330004109 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9982504600002358 secs.
Scheduler: Sending due task update_prices_every_30_seconds (crypto_prices.tasks.update_price_list)
crypto_prices.tasks.update_price_list sent. id->888c83f3-c299-4c92-a379-14893a312bcf
beat: Waking up in 29.99 seconds.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.999270135000188 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9987088399993809 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9987090249996982 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.998555271999976 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9990799520001019 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9985183049993793 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9988061109997943 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9990147729995442 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9987524019998091 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9982764210008099 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9991109170005075 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9982628549996662 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9984380579999197 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9987294170005043 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9984904189996087 secs.
Scheduler: Sending due task update_prices_every_30_seconds (crypto_prices.tasks.update_price_list)
crypto_prices.tasks.update_price_list sent. id->53c257e3-4ebe-49b9-86a8-2db157c5bba6
beat: Waking up in 29.99 seconds.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9984985860000961 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.998554850999426 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.999095054999998 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9983408560001408 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9987461860000622 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9985760090003168 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9990920030004418 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9985316449992752 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9992284730005849 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9983183009999266 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9984256139996432 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9988468330002434 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9988282309996066 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.998539793999953 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9985851530000218 secs.
beat: Synchronizing schedule...
Scheduler: Sending due task update_prices_every_30_seconds (crypto_prices.tasks.update_price_list)
crypto_prices.tasks.update_price_list sent. id->c51e796c-aad9-4334-9e43-f85e18bdacb1
beat: Waking up in 29.99 seconds.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9985785319995557 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9993312039996454 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9985048149992508 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.998325487999864 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.999145050000152 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9985605849997228 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9991270009995787 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9982828379997954 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.999105225000676 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9985395920002702 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9988904700003332 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9985586419998072 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9992684179997013 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9988747540000986 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9985638850002942 secs.
Scheduler: Sending due task update_prices_every_30_seconds (crypto_prices.tasks.update_price_list)
crypto_prices.tasks.update_price_list sent. id->d2c1695e-4f17-4238-86d2-d8bd42e059e6
beat: Waking up in 29.99 seconds.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9985071250002875 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9986222239995186 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9986414960003458 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9988641870004358 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9984661260004941 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9987521410002955 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9984936529999686 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9989002700003766 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9987757680000868 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9988213830001769 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9985515289999967 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.998645120999754 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9990794449995519 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9984745439996914 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9987002050002047 secs.
Scheduler: Sending due task update_prices_every_30_seconds (crypto_prices.tasks.update_price_list)
crypto_prices.tasks.update_price_list sent. id->07fb7ee2-6e5e-488f-8247-b491a4359800
beat: Waking up in 29.99 seconds.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9984836929997982 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9986256029997094 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9983090590003485 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9988583949998429 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.998536447999868 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9985719270007394 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9983983679994708 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.998944637999557 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9988708159999078 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9984931760000109 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9985958269999173 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9990938909995748 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9984811989997979 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9991906499999459 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9985039130006044 secs.
Scheduler: Sending due task update_prices_every_30_seconds (crypto_prices.tasks.update_price_list)
crypto_prices.tasks.update_price_list sent. id->a06b92ae-5a95-467a-96de-642604d2c295
beat: Waking up in 29.99 seconds.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9993033689997901 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9987767880002139 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9985076550001395 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9985082470002453 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9985907099999167 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9984859850001158 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.99920676200054 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9986715570003071 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9987216170002284 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9984448109998993 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9984943469999052 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9985873619998529 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9985831630001485 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.998500323999906 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.998553068999172 secs.
Scheduler: Sending due task update_prices_every_30_seconds (crypto_prices.tasks.update_price_list)
crypto_prices.tasks.update_price_list sent. id->f2a45877-94b4-45b9-a360-d48a87ed501b
beat: Waking up in 29.99 seconds.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.999042465000457 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9984508749994347 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9988600020005833 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9985211729999719 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9987548319995767 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9986773240007096 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9987796699997489 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.999100166000062 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9987556030000633 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9987331040001663 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9985453330000382 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9984024890000001 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9987969780004278 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9984090320003816 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9993330690003859 secs.
Scheduler: Sending due task update_prices_every_30_seconds (crypto_prices.tasks.update_price_list)
crypto_prices.tasks.update_price_list sent. id->77812372-6b0f-498a-a2e7-83343970d817
beat: Waking up in 29.99 seconds.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9984169290000864 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9985077370001818 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9985174649991677 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9985664619998715 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9985909070001071 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9985847640000429 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9990681350000159 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9984415610006181 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9985284099993805 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9984059170001274 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9993666669997765 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9985472110001865 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9989393550004024 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9984742030001144 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9988984230003553 secs.
beat: Synchronizing schedule...
Scheduler: Sending due task update_prices_every_30_seconds (crypto_prices.tasks.update_price_list)
crypto_prices.tasks.update_price_list sent. id->d44f901d-9af7-43b1-903d-07c09d1e72e1
beat: Waking up in 29.99 seconds.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9985722649998934 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9985056149998854 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9987409650002519 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9985358110006928 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9985485440001867 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.998636785000599 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9985279130005438 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9985521659991718 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9988896009999735 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9987366909999764 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9989400920003391 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9985642120000193 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9989990640005999 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9987457360002736 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9991148050003176 secs.
Scheduler: Sending due task update_prices_every_30_seconds (crypto_prices.tasks.update_price_list)
crypto_prices.tasks.update_price_list sent. id->5aa1aed9-9a79-4abb-8c2f-be9f74ebf73e
beat: Waking up in 29.99 seconds.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9986631539995869 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9986874010000975 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9988046770004075 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.998830404999353 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.998920981000083 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9986196760000894 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9985309409994443 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9984695359999023 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9984586979999222 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9990021710000292 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9986408029999438 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9993429050000486 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9985978510003406 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9988330989999668 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9985247900003742 secs.
Scheduler: Sending due task update_prices_every_30_seconds (crypto_prices.tasks.update_price_list)
crypto_prices.tasks.update_price_list sent. id->acabcd34-4e7f-4a0b-b5c1-4c88ecf521a0
beat: Waking up in 29.99 seconds.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9988737839994428 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9986316619997524 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9988521969999056 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9986869530002878 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9986315839996678 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9987699410003188 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9985430879996784 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9985073050002029 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9986427289995845 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9982514220000667 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.99918629900003 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9987716460000229 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.998849856000561 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.998587402999874 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9989380010001696 secs.
/home/haseeb/crypto_prices_project/crypto_prices_project/settings.py changed, reloading.
Watching for file changes with StatReloader
Scheduler: Sending due task update_prices_every_30_seconds (crypto_prices.tasks.update_price_list)
crypto_prices.tasks.update_price_list sent. id->5f4d358b-4ffc-4cdb-ae99-542ccd163f59
beat: Waking up in 29.99 seconds.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9986840060000759 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9985900270003185 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9983133489995453 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9984367580000253 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9985603739996805 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.998776110000108 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9995760640003937 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9990624779993595 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9986735270003919 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9988107689996468 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.998871608000627 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9985880630001702 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9985070699995049 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9986155490005331 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9986520940001355 secs.
Scheduler: Sending due task update_prices_every_30_seconds (crypto_prices.tasks.update_price_list)
crypto_prices.tasks.update_price_list sent. id->4df3377b-ec0f-4caf-965b-9eb3c24fddb4
beat: Waking up in 29.99 seconds.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9984678250002617 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9988975729993399 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9987315589996797 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9984094760002336 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9982363339995572 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9987299849999545 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9985245459993166 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9990862940003353 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9985148959995058 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.998722428000292 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9985736300004646 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9986889900001188 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9985236450002049 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9990953569995327 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9987496720004856 secs.
Scheduler: Sending due task update_prices_every_30_seconds (crypto_prices.tasks.update_price_list)
crypto_prices.tasks.update_price_list sent. id->a66bb7dc-459c-4525-8e30-0968e7aec7bc
beat: Waking up in 29.99 seconds.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9987125819998255 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9985588480003571 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9993773400001373 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9986752260001595 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.998925318000147 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9985394020004605 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9984982050000326 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9984562139998161 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9985753179998937 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9987119629995505 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9986254220002593 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9984537330001331 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9983836679994056 secs.
Timer wake-up! Next ETA 1.0 secs.
/home/haseeb/crypto_prices_project/crypto_prices_project/settings.py changed, reloading.
Watching for file changes with StatReloader
Timer wake-up! Next ETA 0.9988705289997597 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9985521230000813 secs.
beat: Synchronizing schedule...
Scheduler: Sending due task update_prices_every_30_seconds (crypto_prices.tasks.update_price_list)
crypto_prices.tasks.update_price_list sent. id->dd33a45f-23e7-4314-94f8-8be969ec5790
beat: Waking up in 29.99 seconds.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9987617959995987 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9985001900004136 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9983595390003757 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9985703980000835 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9986632649997773 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9993912069994622 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.998715675999847 secs.
Timer wake-up! Next ETA 1.0 secs.
/home/haseeb/crypto_prices_project/crypto_prices_project/celery.py changed, reloading.
Timer wake-up! Next ETA 0.9987836219997916 secs.
Watching for file changes with StatReloader
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9994559310007389 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9985840150002332 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9986338950002391 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9987298470005044 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9992870659998516 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9987550549994921 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.999261635000039 secs.
Scheduler: Sending due task update_prices_every_30_seconds (crypto_prices.tasks.update_price_list)
crypto_prices.tasks.update_price_list sent. id->ab87ccbc-cbda-414a-9b4c-a139934756a6
beat: Waking up in 29.99 seconds.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9985949949996211 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9991790399999445 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9985703689999355 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9987893090001307 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9986383559999013 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9986872720000974 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.998632866000662 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9992203499996322 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9987221750006938 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9986253340002804 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9987158140002066 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9982438650004042 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9985495509999964 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9989774009991379 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9985267779993592 secs.
Scheduler: Sending due task update_prices_every_30_seconds (crypto_prices.tasks.update_price_list)
crypto_prices.tasks.update_price_list sent. id->5efef85b-af8f-4e63-88c1-75406a332c53
beat: Waking up in 29.99 seconds.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9990986929997234 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.998466240000198 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9986342649999642 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9986624530001791 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9989057639995735 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9987046680007552 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9985178119995908 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.99856946699947 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9990729829996781 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9983305740006472 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9993245120003849 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9984633530002611 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9987383480001881 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9983761280000181 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9991557090006609 secs.
Scheduler: Sending due task update_prices_every_30_seconds (crypto_prices.tasks.update_price_list)
crypto_prices.tasks.update_price_list sent. id->57fea6b9-9a46-4070-8d35-706a451aa303
beat: Waking up in 29.99 seconds.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9987036140000782 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9991163969998524 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.998443046999455 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9986601419996077 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9986174189998565 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.998736213000484 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9985799380001481 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9984630639992247 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9984154599997055 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9984677100001136 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.998552674000166 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9985791280005287 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9990253870000743 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9990891440002088 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9985464889996365 secs.
Scheduler: Sending due task update_prices_every_30_seconds (crypto_prices.tasks.update_price_list)
crypto_prices.tasks.update_price_list sent. id->b1eb0d23-5dbc-4735-b82c-70036b07d5f5
beat: Waking up in 29.99 seconds.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9992882330006978 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9984056820003389 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9984817199992904 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9985053400005199 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9985946269998749 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9990736629997627 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9985354939999525 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9990128019999247 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9986304690000907 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9988456680002855 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9986588949996076 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9986207339998145 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9995248469995204 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9988039669997306 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9991725609997957 secs.
Scheduler: Sending due task update_prices_every_30_seconds (crypto_prices.tasks.update_price_list)
crypto_prices.tasks.update_price_list sent. id->f71c0d8c-777f-4424-8143-04d0174c3755
beat: Waking up in 29.99 seconds.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9986160970001947 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9996224950000396 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9990900200000397 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9991826309997123 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.998856928999885 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.998685266999928 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9987336859994684 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9983985890003169 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9985950390000653 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9988298580001356 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9994332680007574 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9987736840002981 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9986953379993793 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9987790410004891 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.99881546800043 secs.
beat: Synchronizing schedule...
Scheduler: Sending due task update_prices_every_30_seconds (crypto_prices.tasks.update_price_list)
crypto_prices.tasks.update_price_list sent. id->9cdc36a6-8e84-4581-83a0-3fb3610741ad
beat: Waking up in 29.99 seconds.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9987245289994462 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9984679839999444 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9993897919994197 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9985837809999794 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9994801739994728 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9987762139999177 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9984247530001085 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9985068100004355 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9990579010000147 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9987443379995966 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9987905699999828 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9988402420003695 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9985778939999364 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9986311200000273 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9987571239998942 secs.
Scheduler: Sending due task update_prices_every_30_seconds (crypto_prices.tasks.update_price_list)
crypto_prices.tasks.update_price_list sent. id->ef55932d-ee11-44bf-87c3-ef9647b37f3e
beat: Waking up in 29.99 seconds.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9993542400006845 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9987357149993841 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9986369849993935 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9985236469992742 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9988033310000901 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9995352440000715 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9985075300000972 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9985145999999077 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9986816330001602 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9986424779999652 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9987002799998663 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9996082239995303 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9983014460003687 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9992139010000756 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9986462300003041 secs.
Scheduler: Sending due task update_prices_every_30_seconds (crypto_prices.tasks.update_price_list)
crypto_prices.tasks.update_price_list sent. id->845cc5b8-7619-492c-9d69-b4c105cb3d63
beat: Waking up in 29.99 seconds.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9984268580001299 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9984296759994322 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9986345289999008 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9984949250001591 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9992911979998098 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9984732620005161 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9986776529995041 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9982218519999151 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9986143389996869 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9989269490006336 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9988004180004282 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9983236859998215 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9984514670004501 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9990805819998059 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9993130969996855 secs.
Scheduler: Sending due task update_prices_every_30_seconds (crypto_prices.tasks.update_price_list)
crypto_prices.tasks.update_price_list sent. id->008f9872-67f3-454a-9141-e0dfdad51761
beat: Waking up in 29.99 seconds.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9981679799993799 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9982422059993041 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9985726449995127 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9982291110000006 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9984077090002756 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.998238377999769 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9980433769997035 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9988222540005154 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9982948279994162 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9984013739995135 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9981956259998697 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9983315339995897 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9987675570000647 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9984538939997947 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9989913069994145 secs.
Scheduler: Sending due task update_prices_every_30_seconds (crypto_prices.tasks.update_price_list)
crypto_prices.tasks.update_price_list sent. id->35cac58d-8ab7-44fa-a4b0-8e39a59d99dd
beat: Waking up in 29.99 seconds.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9983152759996301 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9982253999996828 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9988694769999711 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9984451600003013 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9984549729997525 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9983503129997189 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9992314510000142 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9984804330006227 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9985294649995922 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.998322671999631 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9990280669999265 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9982770670003447 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9983780419997856 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9985520019999967 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9980873370004701 secs.
Scheduler: Sending due task update_prices_every_30_seconds (crypto_prices.tasks.update_price_list)
crypto_prices.tasks.update_price_list sent. id->03543c0e-91ba-4f04-b3b6-50a376aa5623
beat: Waking up in 29.99 seconds.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9994491899997229 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9984672520004096 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9984105679995992 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9984594310008106 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9984878440000102 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9984658080002191 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9987568350006768 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9982719099998576 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9991270090004036 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.99836237099953 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9984693989999869 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9986576179999247 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9987881469996864 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9988382330002423 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9988461240000106 secs.
beat: Synchronizing schedule...
Scheduler: Sending due task update_prices_every_30_seconds (crypto_prices.tasks.update_price_list)
crypto_prices.tasks.update_price_list sent. id->7dd45c45-3b96-46c3-9913-fff8eca8baf4
beat: Waking up in 29.99 seconds.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9990159360004327 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9988636999996743 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9986669950003488 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9985110150000764 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9985310490001211 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9986224360000051 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9996818509998775 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9985971090000021 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9985126000001401 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9985983990000022 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.998799849999159 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9985324969993599 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9991119870001057 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9985037830001602 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.998855433999779 secs.
Scheduler: Sending due task update_prices_every_30_seconds (crypto_prices.tasks.update_price_list)
crypto_prices.tasks.update_price_list sent. id->d5506365-d96b-43b5-96fd-a21f58bdd961
beat: Waking up in 29.99 seconds.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.998422675999791 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9985466050002287 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9986225030006608 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9982988339997974 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9985143330004576 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.998513441999421 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9984512169994559 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9987792259998969 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9983286870001393 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9989418440000009 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9985773090002112 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9988549259996944 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9983024089997343 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9992884950006555 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9988343399991209 secs.
Scheduler: Sending due task update_prices_every_30_seconds (crypto_prices.tasks.update_price_list)
crypto_prices.tasks.update_price_list sent. id->3ff4c34d-b76f-4597-9b1d-b68bdbf8c833
beat: Waking up in 29.99 seconds.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9995921749996342 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9993318819997512 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9985778609998306 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9988998759999959 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.998697352999443 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9986163329995179 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9985139840000556 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9987459779995334 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9986530440000934 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.999221475000013 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9984327769998345 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9988110239992238 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9984782379997341 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9990510730003734 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9986569419997977 secs.
Scheduler: Sending due task update_prices_every_30_seconds (crypto_prices.tasks.update_price_list)
crypto_prices.tasks.update_price_list sent. id->4aafafc5-fab0-49ac-82c2-9c06f2de3eef
beat: Waking up in 29.99 seconds.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9987837509997917 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9993028590006361 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9986251340005765 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9988366960005806 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9986454270001559 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9987727690004249 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9985195130002467 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9988482210001166 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9986763349998 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9990189990003273 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9987510250002742 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9987839059995167 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9985471640002288 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9985455189998902 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9986281090004923 secs.
Scheduler: Sending due task update_prices_every_30_seconds (crypto_prices.tasks.update_price_list)
crypto_prices.tasks.update_price_list sent. id->c2812772-8ae4-49e8-8835-ee2ac7c2245c
beat: Waking up in 29.99 seconds.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9990683999994872 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9984991339997578 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.999319812000067 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9986547930002416 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9988386910008558 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9987966340004277 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9987349940001877 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9996518819998528 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9988519350008573 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9987420509996809 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9984891029998835 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9984688129998176 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9985728490000838 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9988799769998877 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9985522420001871 secs.
Scheduler: Sending due task update_prices_every_30_seconds (crypto_prices.tasks.update_price_list)
crypto_prices.tasks.update_price_list sent. id->8b82626f-e25c-4793-b81e-10275c81be41
beat: Waking up in 29.99 seconds.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9987405829997442 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9985628039994481 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9985277819996554 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9985600159998285 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9984944110001379 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9985177440003099 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9991171629999371 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9985434189993612 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.998335930000394 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9982956549993105 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9983493230001841 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9987209649998476 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9984935430002224 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9987348509994263 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9983257020003293 secs.
beat: Synchronizing schedule...
Scheduler: Sending due task update_prices_every_30_seconds (crypto_prices.tasks.update_price_list)
crypto_prices.tasks.update_price_list sent. id->4159d843-4042-4304-8661-6b49b34ac524
beat: Waking up in 29.99 seconds.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9990711459995509 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9986215670005549 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9990282549997573 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9983713190003982 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9987447140001677 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9985228539999298 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9986340620007468 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9985999270002139 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9997132379994582 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9987867540003208 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9984894179997355 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9984666039999865 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9985029039999063 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9984455399999206 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9986231619996033 secs.
Scheduler: Sending due task update_prices_every_30_seconds (crypto_prices.tasks.update_price_list)
crypto_prices.tasks.update_price_list sent. id->d3be9b55-c50c-4c39-add2-aaa633de6aa7
beat: Waking up in 29.99 seconds.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9985499430003983 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9991068839999571 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9987097510002059 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9985064610000336 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9983592090002276 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9986302509996676 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9988164090000282 secs.
Timer wake-up! Next ETA 1.0 secs.
| Worker: Closing Beat...
| Worker: Closing Pool...
Timer wake-up! Next ETA 0.9986646589995871 secs.
| Worker: Closing Consumer...
| Worker: Terminating Consumer...
| Consumer: Closing Connection...
| Consumer: Closing Events...
| Consumer: Closing Heart...
| Consumer: Closing Tasks...
| Consumer: Closing Control...
| Consumer: Closing event loop...
| Consumer: Stopping event loop...
| Consumer: Stopping Control...
| Consumer: Stopping Tasks...
Canceling task consumer...
| Consumer: Stopping Heart...
| Consumer: Stopping Events...
| Consumer: Stopping Connection...
| Worker: Terminating Pool...
| Worker: Terminating Beat...
| Consumer: Shutdown Control...
| Consumer: Shutdown Tasks...
Canceling task consumer...
Closing consumer channel...
| Consumer: Shutdown Heart...
| Consumer: Shutdown Events...
| Consumer: Shutdown Connection...

def backend_cleanup():
    return 1


def xstarmap(task, it):
    return 1


def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1


def accumulate(self, *args, **kwargs):
    return 1


def chunks(task, it, n):
    return 1


def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1


def update_price_list():
    return 1


def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1


def xmap(task, it):
    return 1


def chain(*args, **kwargs):
    return 1

| Worker: Preparing bootsteps.
| Worker: Building graph...
| Worker: New boot order: {Timer, Hub, Pool, Autoscaler, StateDB, Beat, Consumer}
| Consumer: Preparing bootsteps.
| Consumer: Building graph...
| Consumer: New boot order: {Connection, Events, Heart, Mingle, Gossip, Agent, Tasks, Control, event loop}
Unrecoverable error: ModuleNotFoundError("No module named 'django-db'")
Traceback (most recent call last):
  File "/home/haseeb/.local/lib/python3.10/site-packages/celery/worker/worker.py", line 202, in start
    self.blueprint.start(self)
  File "/home/haseeb/.local/lib/python3.10/site-packages/celery/bootsteps.py", line 112, in start
    self.on_start()
  File "/home/haseeb/.local/lib/python3.10/site-packages/celery/apps/worker.py", line 135, in on_start
    self.emit_banner()
  File "/home/haseeb/.local/lib/python3.10/site-packages/celery/apps/worker.py", line 169, in emit_banner
    ' \n', self.startup_info(artlines=not use_image))),
  File "/home/haseeb/.local/lib/python3.10/site-packages/celery/apps/worker.py", line 231, in startup_info
    results=self.app.backend.as_uri(),
  File "/home/haseeb/.local/lib/python3.10/site-packages/celery/app/base.py", line 1301, in backend
    self._backend = self._get_backend()
  File "/home/haseeb/.local/lib/python3.10/site-packages/celery/app/base.py", line 966, in _get_backend
    backend, url = backends.by_url(
  File "/home/haseeb/.local/lib/python3.10/site-packages/celery/app/backends.py", line 68, in by_url
    return by_name(backend, loader), url
  File "/home/haseeb/.local/lib/python3.10/site-packages/celery/app/backends.py", line 48, in by_name
    cls = symbol_by_name(backend, aliases)
  File "/home/haseeb/.local/lib/python3.10/site-packages/kombu/utils/imports.py", line 59, in symbol_by_name
    module = imp(module_name, package=package, **kwargs)
  File "/usr/lib/python3.10/importlib/__init__.py", line 126, in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
  File "<frozen importlib._bootstrap>", line 1050, in _gcd_import
  File "<frozen importlib._bootstrap>", line 1027, in _find_and_load
  File "<frozen importlib._bootstrap>", line 1004, in _find_and_load_unlocked
ModuleNotFoundError: No module named 'django-db'

def backend_cleanup():
    return 1


def xstarmap(task, it):
    return 1


def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1


def accumulate(self, *args, **kwargs):
    return 1


def chunks(task, it, n):
    return 1


def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1


def update_price_list():
    return 1


def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1


def xmap(task, it):
    return 1


def chain(*args, **kwargs):
    return 1

| Worker: Preparing bootsteps.
| Worker: Building graph...
| Worker: New boot order: {Beat, StateDB, Timer, Hub, Pool, Autoscaler, Consumer}
| Consumer: Preparing bootsteps.
| Consumer: Building graph...
| Consumer: New boot order: {Connection, Events, Heart, Agent, Mingle, Gossip, Tasks, Control, event loop}
Unrecoverable error: ModuleNotFoundError("No module named 'django-db'")
Traceback (most recent call last):
  File "/home/haseeb/.local/lib/python3.10/site-packages/celery/worker/worker.py", line 202, in start
    self.blueprint.start(self)
  File "/home/haseeb/.local/lib/python3.10/site-packages/celery/bootsteps.py", line 112, in start
    self.on_start()
  File "/home/haseeb/.local/lib/python3.10/site-packages/celery/apps/worker.py", line 135, in on_start
    self.emit_banner()
  File "/home/haseeb/.local/lib/python3.10/site-packages/celery/apps/worker.py", line 169, in emit_banner
    ' \n', self.startup_info(artlines=not use_image))),
  File "/home/haseeb/.local/lib/python3.10/site-packages/celery/apps/worker.py", line 231, in startup_info
    results=self.app.backend.as_uri(),
  File "/home/haseeb/.local/lib/python3.10/site-packages/celery/app/base.py", line 1301, in backend
    self._backend = self._get_backend()
  File "/home/haseeb/.local/lib/python3.10/site-packages/celery/app/base.py", line 966, in _get_backend
    backend, url = backends.by_url(
  File "/home/haseeb/.local/lib/python3.10/site-packages/celery/app/backends.py", line 68, in by_url
    return by_name(backend, loader), url
  File "/home/haseeb/.local/lib/python3.10/site-packages/celery/app/backends.py", line 48, in by_name
    cls = symbol_by_name(backend, aliases)
  File "/home/haseeb/.local/lib/python3.10/site-packages/kombu/utils/imports.py", line 59, in symbol_by_name
    module = imp(module_name, package=package, **kwargs)
  File "/usr/lib/python3.10/importlib/__init__.py", line 126, in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
  File "<frozen importlib._bootstrap>", line 1050, in _gcd_import
  File "<frozen importlib._bootstrap>", line 1027, in _find_and_load
  File "<frozen importlib._bootstrap>", line 1004, in _find_and_load_unlocked
ModuleNotFoundError: No module named 'django-db'

def backend_cleanup():
    return 1


def xstarmap(task, it):
    return 1


def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1


def accumulate(self, *args, **kwargs):
    return 1


def chunks(task, it, n):
    return 1


def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1


def update_price_list():
    return 1


def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1


def xmap(task, it):
    return 1


def chain(*args, **kwargs):
    return 1

| Worker: Preparing bootsteps.
| Worker: Building graph...
| Worker: New boot order: {StateDB, Timer, Hub, Pool, Autoscaler, Beat, Consumer}
| Consumer: Preparing bootsteps.
| Consumer: Building graph...
| Consumer: New boot order: {Connection, Events, Heart, Agent, Mingle, Tasks, Control, Gossip, event loop}
Unrecoverable error: ModuleNotFoundError("No module named 'django-db'")
Traceback (most recent call last):
  File "/home/haseeb/.local/lib/python3.10/site-packages/celery/worker/worker.py", line 202, in start
    self.blueprint.start(self)
  File "/home/haseeb/.local/lib/python3.10/site-packages/celery/bootsteps.py", line 112, in start
    self.on_start()
  File "/home/haseeb/.local/lib/python3.10/site-packages/celery/apps/worker.py", line 135, in on_start
    self.emit_banner()
  File "/home/haseeb/.local/lib/python3.10/site-packages/celery/apps/worker.py", line 169, in emit_banner
    ' \n', self.startup_info(artlines=not use_image))),
  File "/home/haseeb/.local/lib/python3.10/site-packages/celery/apps/worker.py", line 231, in startup_info
    results=self.app.backend.as_uri(),
  File "/home/haseeb/.local/lib/python3.10/site-packages/celery/app/base.py", line 1301, in backend
    self._backend = self._get_backend()
  File "/home/haseeb/.local/lib/python3.10/site-packages/celery/app/base.py", line 966, in _get_backend
    backend, url = backends.by_url(
  File "/home/haseeb/.local/lib/python3.10/site-packages/celery/app/backends.py", line 68, in by_url
    return by_name(backend, loader), url
  File "/home/haseeb/.local/lib/python3.10/site-packages/celery/app/backends.py", line 48, in by_name
    cls = symbol_by_name(backend, aliases)
  File "/home/haseeb/.local/lib/python3.10/site-packages/kombu/utils/imports.py", line 59, in symbol_by_name
    module = imp(module_name, package=package, **kwargs)
  File "/usr/lib/python3.10/importlib/__init__.py", line 126, in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
  File "<frozen importlib._bootstrap>", line 1050, in _gcd_import
  File "<frozen importlib._bootstrap>", line 1027, in _find_and_load
  File "<frozen importlib._bootstrap>", line 1004, in _find_and_load_unlocked
ModuleNotFoundError: No module named 'django-db'

def backend_cleanup():
    return 1


def xstarmap(task, it):
    return 1


def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1


def accumulate(self, *args, **kwargs):
    return 1


def chunks(task, it, n):
    return 1


def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1


def update_price_list():
    return 1


def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1


def xmap(task, it):
    return 1


def chain(*args, **kwargs):
    return 1

| Worker: Preparing bootsteps.
| Worker: Building graph...
| Worker: New boot order: {StateDB, Timer, Hub, Pool, Autoscaler, Beat, Consumer}
| Consumer: Preparing bootsteps.
| Consumer: Building graph...
| Consumer: New boot order: {Connection, Events, Mingle, Gossip, Agent, Tasks, Control, Heart, event loop}
| Worker: Starting Pool
^-- substep ok
| Worker: Starting Consumer
| Consumer: Starting Connection
/home/haseeb/.local/lib/python3.10/site-packages/celery/worker/consumer/consumer.py:507: CPendingDeprecationWarning: The broker_connection_retry configuration setting will no longer determine
whether broker connection retries are made during startup in Celery 6.0 and above.
If you wish to retain the existing behavior for retrying connections on startup,
you should set broker_connection_retry_on_startup to True.
  warnings.warn(

Connected to memory://localhost//
^-- substep ok
| Consumer: Starting Events
/home/haseeb/.local/lib/python3.10/site-packages/celery/worker/consumer/consumer.py:507: CPendingDeprecationWarning: The broker_connection_retry configuration setting will no longer determine
whether broker connection retries are made during startup in Celery 6.0 and above.
If you wish to retain the existing behavior for retrying connections on startup,
you should set broker_connection_retry_on_startup to True.
  warnings.warn(

^-- substep ok
| Consumer: Starting Tasks
^-- substep ok
| Consumer: Starting Control
^-- substep ok
| Consumer: Starting Heart
^-- substep ok
Timer wake-up! Next ETA 1.0 secs.
| Consumer: Starting event loop
celery@haseeb-Dev ready.
basic.qos: prefetch_count->32
Timer wake-up! Next ETA 0.9991316870000446 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9985360619994026 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9992137929993987 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9985470700003134 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.998739482000019 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9985057199992298 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9993293130000893 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9986486440002409 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9989911069997106 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9985380039997835 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9983734260003985 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9988012369994976 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9995555750001586 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9986528230001568 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9985785159997249 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9985307219994866 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9987507959995128 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9985096800000974 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9987855590006802 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9985033600005409 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9984329630005959 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.998573545999534 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.998600167999939 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9989077099999122 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9985772149993863 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9986903460003305 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9984927859995878 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9993410500001119 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9985143829999288 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9982700149994344 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9984952810000323 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9987866189994747 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9987845610003205 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9994930630000454 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9985711640001682 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9991855719999876 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9987614209994717 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9988046709995615 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.998384146000717 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9987707849995786 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9985590639998918 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9985770190005496 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.99920637500054 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9984003679992384 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9990071470001567 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9985243599994647 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9992290889995274 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9988495550005609 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9987379510002938 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9985390159999952 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9986864060001608 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9986713369999052 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9987973380002586 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9986367539995626 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9987829960000454 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9984522459999425 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9987916500003848 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9991705190004723 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9979589290005606 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9987803559997701 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9985838200000217 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9994397560003563 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9985953919995154 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9992301109996333 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9984473090007668 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9984690279998176 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9984953370003495 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.9984685469999022 secs.
Timer wake-up! Next ETA 1.0 secs.
Timer wake-up! Next ETA 0.998726046000229 secs.
Timer wake-up! Next ETA 1.0 secs.
| Worker: Closing Pool...
| Worker: Closing Consumer...
| Worker: Terminating Consumer...
| Consumer: Closing Connection...
| Consumer: Closing Events...
| Consumer: Closing Tasks...
| Consumer: Closing Control...
| Consumer: Closing Heart...
| Consumer: Closing event loop...
| Consumer: Stopping event loop...
| Consumer: Stopping Heart...
| Consumer: Stopping Control...
| Consumer: Stopping Tasks...
Canceling task consumer...
| Consumer: Stopping Events...
| Consumer: Stopping Connection...
| Worker: Terminating Pool...
| Consumer: Shutdown Heart...
| Consumer: Shutdown Control...
| Consumer: Shutdown Tasks...
Canceling task consumer...
Closing consumer channel...
| Consumer: Shutdown Events...
| Consumer: Shutdown Connection...
Watching for file changes with StatReloader
/home/haseeb/crypto_prices_project/crypto_prices_project/settings.py changed, reloading.
Watching for file changes with StatReloader
Watching for file changes with StatReloader

def backend_cleanup():
    return 1


def xstarmap(task, it):
    return 1


def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1


def accumulate(self, *args, **kwargs):
    return 1


def chunks(task, it, n):
    return 1


def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1


def update_price_list():
    return 1


def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1


def xmap(task, it):
    return 1


def chain(*args, **kwargs):
    return 1

| Worker: Preparing bootsteps.
| Worker: Building graph...
| Worker: New boot order: {StateDB, Timer, Hub, Pool, Autoscaler, Beat, Consumer}
| Consumer: Preparing bootsteps.
| Consumer: Building graph...
| Consumer: New boot order: {Connection, Agent, Events, Mingle, Tasks, Control, Gossip, Heart, event loop}
| Worker: Starting Hub
^-- substep ok
| Worker: Starting Pool
^-- substep ok
| Worker: Starting Beat
^-- substep ok
| Worker: Starting Consumer
| Consumer: Starting Connection
/home/haseeb/.local/lib/python3.10/site-packages/celery/worker/consumer/consumer.py:507: CPendingDeprecationWarning: The broker_connection_retry configuration setting will no longer determine
whether broker connection retries are made during startup in Celery 6.0 and above.
If you wish to retain the existing behavior for retrying connections on startup,
you should set broker_connection_retry_on_startup to True.
  warnings.warn(

Connected to redis://127.0.0.1:6379/0
^-- substep ok
| Consumer: Starting Events
/home/haseeb/.local/lib/python3.10/site-packages/celery/worker/consumer/consumer.py:507: CPendingDeprecationWarning: The broker_connection_retry configuration setting will no longer determine
whether broker connection retries are made during startup in Celery 6.0 and above.
If you wish to retain the existing behavior for retrying connections on startup,
you should set broker_connection_retry_on_startup to True.
  warnings.warn(

^-- substep ok
| Consumer: Starting Mingle
mingle: searching for neighbors
beat: Starting...
Reset: Timezone changed from 'UTC' to 'Asia/Karachi'
Current schedule:
<ScheduleEntry: update_prices_every_30_seconds crypto_prices.tasks.update_price_list() <freq: 30.00 seconds>
beat: Ticking with max interval->5.00 minutes
beat: Waking up in 29.98 seconds.
mingle: all alone
^-- substep ok
| Consumer: Starting Tasks
^-- substep ok
| Consumer: Starting Control
^-- substep ok
| Consumer: Starting Gossip
^-- substep ok
| Consumer: Starting Heart
^-- substep ok
| Consumer: Starting event loop
| Worker: Hub.register Pool...
celery@haseeb-Dev ready.
basic.qos: prefetch_count->32

def backend_cleanup():
    return 1


def xstarmap(task, it):
    return 1


def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1


def accumulate(self, *args, **kwargs):
    return 1


def chunks(task, it, n):
    return 1


def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1


def update_price_list():
    return 1


def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1


def xmap(task, it):
    return 1


def chain(*args, **kwargs):
    return 1

| Worker: Preparing bootsteps.
| Worker: Building graph...
| Worker: New boot order: {Beat, StateDB, Timer, Hub, Pool, Autoscaler, Consumer}
| Consumer: Preparing bootsteps.
| Consumer: Building graph...
| Consumer: New boot order: {Connection, Events, Mingle, Gossip, Agent, Heart, Tasks, Control, event loop}
| Worker: Starting Hub
^-- substep ok
| Worker: Starting Pool
^-- substep ok
| Worker: Starting Consumer
| Consumer: Starting Connection
/home/haseeb/.local/lib/python3.10/site-packages/celery/worker/consumer/consumer.py:507: CPendingDeprecationWarning: The broker_connection_retry configuration setting will no longer determine
whether broker connection retries are made during startup in Celery 6.0 and above.
If you wish to retain the existing behavior for retrying connections on startup,
you should set broker_connection_retry_on_startup to True.
  warnings.warn(

Connected to redis://127.0.0.1:6379/0
^-- substep ok
| Consumer: Starting Events
/home/haseeb/.local/lib/python3.10/site-packages/celery/worker/consumer/consumer.py:507: CPendingDeprecationWarning: The broker_connection_retry configuration setting will no longer determine
whether broker connection retries are made during startup in Celery 6.0 and above.
If you wish to retain the existing behavior for retrying connections on startup,
you should set broker_connection_retry_on_startup to True.
  warnings.warn(

^-- substep ok
| Consumer: Starting Mingle
mingle: searching for neighbors
pidbox received method hello(from_node='celery@haseeb-Dev', revoked={}) [reply_to:{'exchange': 'reply.celery.pidbox', 'routing_key': '91b54c5d-67f4-366f-9cf5-464e1938fc99'} ticket:c98b39ba-e46e-478e-a1c1-572a8635579a]
mingle: all alone
^-- substep ok
| Consumer: Starting Gossip
^-- substep ok
| Consumer: Starting Heart
^-- substep ok
| Consumer: Starting Tasks
^-- substep ok
| Consumer: Starting Control
^-- substep ok
| Consumer: Starting event loop
| Worker: Hub.register Pool...
celery@haseeb-Dev ready.
basic.qos: prefetch_count->32
beat: Synchronizing schedule...
Scheduler: Sending due task update_prices_every_30_seconds (crypto_prices.tasks.update_price_list)
crypto_prices.tasks.update_price_list sent. id->cfc330cb-23b0-4b47-9d82-96636d01cc08
beat: Waking up in 29.96 seconds.
Task crypto_prices.tasks.update_price_list[cfc330cb-23b0-4b47-9d82-96636d01cc08] received
TaskPool: Apply <function fast_trace_task at 0x7ec2201b4a60> (args:('crypto_prices.tasks.update_price_list', 'cfc330cb-23b0-4b47-9d82-96636d01cc08', {'lang': 'py', 'task': 'crypto_prices.tasks.update_price_list', 'id': 'cfc330cb-23b0-4b47-9d82-96636d01cc08', 'shadow': None, 'eta': None, 'expires': None, 'group': None, 'group_index': None, 'retries': 0, 'timelimit': [None, None], 'root_id': 'cfc330cb-23b0-4b47-9d82-96636d01cc08', 'parent_id': None, 'argsrepr': '()', 'kwargsrepr': '{}', 'origin': 'gen21820@haseeb-Dev', 'ignore_result': False, 'replaced_task_nesting': 0, 'stamped_headers': None, 'stamps': {}, 'properties': {'correlation_id': 'cfc330cb-23b0-4b47-9d82-96636d01cc08', 'reply_to': '485aab06-1181-319c-8f7e-3468dbf3713e', 'delivery_mode': 2, 'delivery_info': {'exchange': '', 'routing_key': 'celery'}, 'priority': 0, 'body_encoding': 'base64', 'delivery_tag': 'a4d456df-6874-41fa-b4f3-dc48446de07a'}, 'reply_to': '485aab06-1181-319c-8f7e-3468dbf3713e', 'correlation_id': 'cfc330cb-23b0-4b47-9d82-96636d01cc08', 'hostname': 'celery@haseeb-Dev', 'delivery_info': {'exchange':... kwargs:{})
Fetching cryptocurrency prices from Coingecko API...
Starting new HTTPS connection (1): api.coingecko.com:443
https://api.coingecko.com:443 "GET /api/v3/simple/price?ids=bitcoin,solana,ethereum&vs_currencies=usd HTTP/1.1" 200 None
Received data from Coingecko API: {'bitcoin': {'usd': 64584}, 'ethereum': {'usd': 3364.11}, 'solana': {'usd': 176.56}}
Task crypto_prices.tasks.update_price_list[cfc330cb-23b0-4b47-9d82-96636d01cc08] raised unexpected: IntegrityError('NOT NULL constraint failed: crypto_prices_currency.crypto_prices_id')
Traceback (most recent call last):
  File "/home/haseeb/.local/lib/python3.10/site-packages/django/db/models/query.py", line 948, in get_or_create
    return self.get(**kwargs), False
  File "/home/haseeb/.local/lib/python3.10/site-packages/django/db/models/query.py", line 649, in get
    raise self.model.DoesNotExist(
crypto_prices.models.Currency.DoesNotExist: Currency matching query does not exist.

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/home/haseeb/.local/lib/python3.10/site-packages/django/db/backends/utils.py", line 105, in _execute
    return self.cursor.execute(sql, params)
  File "/home/haseeb/.local/lib/python3.10/site-packages/django/db/backends/sqlite3/base.py", line 329, in execute
    return super().execute(query, params)
sqlite3.IntegrityError: NOT NULL constraint failed: crypto_prices_currency.crypto_prices_id

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/home/haseeb/.local/lib/python3.10/site-packages/celery/app/trace.py", line 477, in trace_task
    R = retval = fun(*args, **kwargs)
  File "/home/haseeb/.local/lib/python3.10/site-packages/celery/app/trace.py", line 760, in __protected_call__
    return self.run(*args, **kwargs)
  File "/home/haseeb/crypto_prices_project/crypto_prices/tasks.py", line 24, in update_price_list
    currency, created = Currency.objects.update_or_create(
  File "/home/haseeb/.local/lib/python3.10/site-packages/django/db/models/manager.py", line 87, in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
  File "/home/haseeb/.local/lib/python3.10/site-packages/django/db/models/query.py", line 986, in update_or_create
    obj, created = self.select_for_update().get_or_create(
  File "/home/haseeb/.local/lib/python3.10/site-packages/django/db/models/query.py", line 955, in get_or_create
    return self.create(**params), True
  File "/home/haseeb/.local/lib/python3.10/site-packages/django/db/models/query.py", line 679, in create
    obj.save(force_insert=True, using=self.db)
  File "/home/haseeb/.local/lib/python3.10/site-packages/django/db/models/base.py", line 822, in save
    self.save_base(
  File "/home/haseeb/.local/lib/python3.10/site-packages/django/db/models/base.py", line 909, in save_base
    updated = self._save_table(
  File "/home/haseeb/.local/lib/python3.10/site-packages/django/db/models/base.py", line 1067, in _save_table
    results = self._do_insert(
  File "/home/haseeb/.local/lib/python3.10/site-packages/django/db/models/base.py", line 1108, in _do_insert
    return manager._insert(
  File "/home/haseeb/.local/lib/python3.10/site-packages/django/db/models/manager.py", line 87, in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
  File "/home/haseeb/.local/lib/python3.10/site-packages/django/db/models/query.py", line 1847, in _insert
    return query.get_compiler(using=using).execute_sql(returning_fields)
  File "/home/haseeb/.local/lib/python3.10/site-packages/django/db/models/sql/compiler.py", line 1823, in execute_sql
    cursor.execute(sql, params)
  File "/home/haseeb/.local/lib/python3.10/site-packages/django/db/backends/utils.py", line 122, in execute
    return super().execute(sql, params)
  File "/home/haseeb/.local/lib/python3.10/site-packages/django/db/backends/utils.py", line 79, in execute
    return self._execute_with_wrappers(
  File "/home/haseeb/.local/lib/python3.10/site-packages/django/db/backends/utils.py", line 92, in _execute_with_wrappers
    return executor(sql, params, many, context)
  File "/home/haseeb/.local/lib/python3.10/site-packages/django/db/backends/utils.py", line 100, in _execute
    with self.db.wrap_database_errors:
  File "/home/haseeb/.local/lib/python3.10/site-packages/django/db/utils.py", line 91, in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
  File "/home/haseeb/.local/lib/python3.10/site-packages/django/db/backends/utils.py", line 105, in _execute
    return self.cursor.execute(sql, params)
  File "/home/haseeb/.local/lib/python3.10/site-packages/django/db/backends/sqlite3/base.py", line 329, in execute
    return super().execute(query, params)
django.db.utils.IntegrityError: NOT NULL constraint failed: crypto_prices_currency.crypto_prices_id
Scheduler: Sending due task update_prices_every_30_seconds (crypto_prices.tasks.update_price_list)
crypto_prices.tasks.update_price_list sent. id->84a8b6ab-1d97-4338-870c-4d06c9113293
beat: Waking up in 29.98 seconds.
Task crypto_prices.tasks.update_price_list[84a8b6ab-1d97-4338-870c-4d06c9113293] received
TaskPool: Apply <function fast_trace_task at 0x7ec2201b4a60> (args:('crypto_prices.tasks.update_price_list', '84a8b6ab-1d97-4338-870c-4d06c9113293', {'lang': 'py', 'task': 'crypto_prices.tasks.update_price_list', 'id': '84a8b6ab-1d97-4338-870c-4d06c9113293', 'shadow': None, 'eta': None, 'expires': None, 'group': None, 'group_index': None, 'retries': 0, 'timelimit': [None, None], 'root_id': '84a8b6ab-1d97-4338-870c-4d06c9113293', 'parent_id': None, 'argsrepr': '()', 'kwargsrepr': '{}', 'origin': 'gen21820@haseeb-Dev', 'ignore_result': False, 'replaced_task_nesting': 0, 'stamped_headers': None, 'stamps': {}, 'properties': {'correlation_id': '84a8b6ab-1d97-4338-870c-4d06c9113293', 'reply_to': '485aab06-1181-319c-8f7e-3468dbf3713e', 'delivery_mode': 2, 'delivery_info': {'exchange': '', 'routing_key': 'celery'}, 'priority': 0, 'body_encoding': 'base64', 'delivery_tag': 'f46989f2-ac26-49e0-a091-c47d7f63d580'}, 'reply_to': '485aab06-1181-319c-8f7e-3468dbf3713e', 'correlation_id': '84a8b6ab-1d97-4338-870c-4d06c9113293', 'hostname': 'celery@haseeb-Dev', 'delivery_info': {'exchange':... kwargs:{})
Fetching cryptocurrency prices from Coingecko API...
Starting new HTTPS connection (1): api.coingecko.com:443
https://api.coingecko.com:443 "GET /api/v3/simple/price?ids=bitcoin,solana,ethereum&vs_currencies=usd HTTP/1.1" 200 None
Received data from Coingecko API: {'bitcoin': {'usd': 64584}, 'ethereum': {'usd': 3364.11}, 'solana': {'usd': 176.56}}
Task crypto_prices.tasks.update_price_list[84a8b6ab-1d97-4338-870c-4d06c9113293] raised unexpected: IntegrityError('NOT NULL constraint failed: crypto_prices_currency.crypto_prices_id')
Traceback (most recent call last):
  File "/home/haseeb/.local/lib/python3.10/site-packages/django/db/models/query.py", line 948, in get_or_create
    return self.get(**kwargs), False
  File "/home/haseeb/.local/lib/python3.10/site-packages/django/db/models/query.py", line 649, in get
    raise self.model.DoesNotExist(
crypto_prices.models.Currency.DoesNotExist: Currency matching query does not exist.

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/home/haseeb/.local/lib/python3.10/site-packages/django/db/backends/utils.py", line 105, in _execute
    return self.cursor.execute(sql, params)
  File "/home/haseeb/.local/lib/python3.10/site-packages/django/db/backends/sqlite3/base.py", line 329, in execute
    return super().execute(query, params)
sqlite3.IntegrityError: NOT NULL constraint failed: crypto_prices_currency.crypto_prices_id

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/home/haseeb/.local/lib/python3.10/site-packages/celery/app/trace.py", line 477, in trace_task
    R = retval = fun(*args, **kwargs)
  File "/home/haseeb/.local/lib/python3.10/site-packages/celery/app/trace.py", line 760, in __protected_call__
    return self.run(*args, **kwargs)
  File "/home/haseeb/crypto_prices_project/crypto_prices/tasks.py", line 24, in update_price_list
    currency, created = Currency.objects.update_or_create(
  File "/home/haseeb/.local/lib/python3.10/site-packages/django/db/models/manager.py", line 87, in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
  File "/home/haseeb/.local/lib/python3.10/site-packages/django/db/models/query.py", line 986, in update_or_create
    obj, created = self.select_for_update().get_or_create(
  File "/home/haseeb/.local/lib/python3.10/site-packages/django/db/models/query.py", line 955, in get_or_create
    return self.create(**params), True
  File "/home/haseeb/.local/lib/python3.10/site-packages/django/db/models/query.py", line 679, in create
    obj.save(force_insert=True, using=self.db)
  File "/home/haseeb/.local/lib/python3.10/site-packages/django/db/models/base.py", line 822, in save
    self.save_base(
  File "/home/haseeb/.local/lib/python3.10/site-packages/django/db/models/base.py", line 909, in save_base
    updated = self._save_table(
  File "/home/haseeb/.local/lib/python3.10/site-packages/django/db/models/base.py", line 1067, in _save_table
    results = self._do_insert(
  File "/home/haseeb/.local/lib/python3.10/site-packages/django/db/models/base.py", line 1108, in _do_insert
    return manager._insert(
  File "/home/haseeb/.local/lib/python3.10/site-packages/django/db/models/manager.py", line 87, in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
  File "/home/haseeb/.local/lib/python3.10/site-packages/django/db/models/query.py", line 1847, in _insert
    return query.get_compiler(using=using).execute_sql(returning_fields)
  File "/home/haseeb/.local/lib/python3.10/site-packages/django/db/models/sql/compiler.py", line 1823, in execute_sql
    cursor.execute(sql, params)
  File "/home/haseeb/.local/lib/python3.10/site-packages/django/db/backends/utils.py", line 122, in execute
    return super().execute(sql, params)
  File "/home/haseeb/.local/lib/python3.10/site-packages/django/db/backends/utils.py", line 79, in execute
    return self._execute_with_wrappers(
  File "/home/haseeb/.local/lib/python3.10/site-packages/django/db/backends/utils.py", line 92, in _execute_with_wrappers
    return executor(sql, params, many, context)
  File "/home/haseeb/.local/lib/python3.10/site-packages/django/db/backends/utils.py", line 100, in _execute
    with self.db.wrap_database_errors:
  File "/home/haseeb/.local/lib/python3.10/site-packages/django/db/utils.py", line 91, in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
  File "/home/haseeb/.local/lib/python3.10/site-packages/django/db/backends/utils.py", line 105, in _execute
    return self.cursor.execute(sql, params)
  File "/home/haseeb/.local/lib/python3.10/site-packages/django/db/backends/sqlite3/base.py", line 329, in execute
    return super().execute(query, params)
django.db.utils.IntegrityError: NOT NULL constraint failed: crypto_prices_currency.crypto_prices_id
Scheduler: Sending due task update_prices_every_30_seconds (crypto_prices.tasks.update_price_list)
crypto_prices.tasks.update_price_list sent. id->cf98edcb-de49-420a-8513-8a9f2fca240d
beat: Waking up in 29.98 seconds.
Task crypto_prices.tasks.update_price_list[cf98edcb-de49-420a-8513-8a9f2fca240d] received
TaskPool: Apply <function fast_trace_task at 0x7ec2201b4a60> (args:('crypto_prices.tasks.update_price_list', 'cf98edcb-de49-420a-8513-8a9f2fca240d', {'lang': 'py', 'task': 'crypto_prices.tasks.update_price_list', 'id': 'cf98edcb-de49-420a-8513-8a9f2fca240d', 'shadow': None, 'eta': None, 'expires': None, 'group': None, 'group_index': None, 'retries': 0, 'timelimit': [None, None], 'root_id': 'cf98edcb-de49-420a-8513-8a9f2fca240d', 'parent_id': None, 'argsrepr': '()', 'kwargsrepr': '{}', 'origin': 'gen21820@haseeb-Dev', 'ignore_result': False, 'replaced_task_nesting': 0, 'stamped_headers': None, 'stamps': {}, 'properties': {'correlation_id': 'cf98edcb-de49-420a-8513-8a9f2fca240d', 'reply_to': '485aab06-1181-319c-8f7e-3468dbf3713e', 'delivery_mode': 2, 'delivery_info': {'exchange': '', 'routing_key': 'celery'}, 'priority': 0, 'body_encoding': 'base64', 'delivery_tag': 'cb0afd83-eb13-4c8c-993d-6c8db2a06d46'}, 'reply_to': '485aab06-1181-319c-8f7e-3468dbf3713e', 'correlation_id': 'cf98edcb-de49-420a-8513-8a9f2fca240d', 'hostname': 'celery@haseeb-Dev', 'delivery_info': {'exchange':... kwargs:{})
Fetching cryptocurrency prices from Coingecko API...
Starting new HTTPS connection (1): api.coingecko.com:443
https://api.coingecko.com:443 "GET /api/v3/simple/price?ids=bitcoin,solana,ethereum&vs_currencies=usd HTTP/1.1" 200 None
Received data from Coingecko API: {'bitcoin': {'usd': 64584}, 'ethereum': {'usd': 3364.11}, 'solana': {'usd': 176.56}}
Task crypto_prices.tasks.update_price_list[cf98edcb-de49-420a-8513-8a9f2fca240d] raised unexpected: IntegrityError('NOT NULL constraint failed: crypto_prices_currency.crypto_prices_id')
Traceback (most recent call last):
  File "/home/haseeb/.local/lib/python3.10/site-packages/django/db/models/query.py", line 948, in get_or_create
    return self.get(**kwargs), False
  File "/home/haseeb/.local/lib/python3.10/site-packages/django/db/models/query.py", line 649, in get
    raise self.model.DoesNotExist(
crypto_prices.models.Currency.DoesNotExist: Currency matching query does not exist.

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/home/haseeb/.local/lib/python3.10/site-packages/django/db/backends/utils.py", line 105, in _execute
    return self.cursor.execute(sql, params)
  File "/home/haseeb/.local/lib/python3.10/site-packages/django/db/backends/sqlite3/base.py", line 329, in execute
    return super().execute(query, params)
sqlite3.IntegrityError: NOT NULL constraint failed: crypto_prices_currency.crypto_prices_id

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/home/haseeb/.local/lib/python3.10/site-packages/celery/app/trace.py", line 477, in trace_task
    R = retval = fun(*args, **kwargs)
  File "/home/haseeb/.local/lib/python3.10/site-packages/celery/app/trace.py", line 760, in __protected_call__
    return self.run(*args, **kwargs)
  File "/home/haseeb/crypto_prices_project/crypto_prices/tasks.py", line 24, in update_price_list
    currency, created = Currency.objects.update_or_create(
  File "/home/haseeb/.local/lib/python3.10/site-packages/django/db/models/manager.py", line 87, in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
  File "/home/haseeb/.local/lib/python3.10/site-packages/django/db/models/query.py", line 986, in update_or_create
    obj, created = self.select_for_update().get_or_create(
  File "/home/haseeb/.local/lib/python3.10/site-packages/django/db/models/query.py", line 955, in get_or_create
    return self.create(**params), True
  File "/home/haseeb/.local/lib/python3.10/site-packages/django/db/models/query.py", line 679, in create
    obj.save(force_insert=True, using=self.db)
  File "/home/haseeb/.local/lib/python3.10/site-packages/django/db/models/base.py", line 822, in save
    self.save_base(
  File "/home/haseeb/.local/lib/python3.10/site-packages/django/db/models/base.py", line 909, in save_base
    updated = self._save_table(
  File "/home/haseeb/.local/lib/python3.10/site-packages/django/db/models/base.py", line 1067, in _save_table
    results = self._do_insert(
  File "/home/haseeb/.local/lib/python3.10/site-packages/django/db/models/base.py", line 1108, in _do_insert
    return manager._insert(
  File "/home/haseeb/.local/lib/python3.10/site-packages/django/db/models/manager.py", line 87, in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
  File "/home/haseeb/.local/lib/python3.10/site-packages/django/db/models/query.py", line 1847, in _insert
    return query.get_compiler(using=using).execute_sql(returning_fields)
  File "/home/haseeb/.local/lib/python3.10/site-packages/django/db/models/sql/compiler.py", line 1823, in execute_sql
    cursor.execute(sql, params)
  File "/home/haseeb/.local/lib/python3.10/site-packages/django/db/backends/utils.py", line 122, in execute
    return super().execute(sql, params)
  File "/home/haseeb/.local/lib/python3.10/site-packages/django/db/backends/utils.py", line 79, in execute
    return self._execute_with_wrappers(
  File "/home/haseeb/.local/lib/python3.10/site-packages/django/db/backends/utils.py", line 92, in _execute_with_wrappers
    return executor(sql, params, many, context)
  File "/home/haseeb/.local/lib/python3.10/site-packages/django/db/backends/utils.py", line 100, in _execute
    with self.db.wrap_database_errors:
  File "/home/haseeb/.local/lib/python3.10/site-packages/django/db/utils.py", line 91, in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
  File "/home/haseeb/.local/lib/python3.10/site-packages/django/db/backends/utils.py", line 105, in _execute
    return self.cursor.execute(sql, params)
  File "/home/haseeb/.local/lib/python3.10/site-packages/django/db/backends/sqlite3/base.py", line 329, in execute
    return super().execute(query, params)
django.db.utils.IntegrityError: NOT NULL constraint failed: crypto_prices_currency.crypto_prices_id
Scheduler: Sending due task update_prices_every_30_seconds (crypto_prices.tasks.update_price_list)
crypto_prices.tasks.update_price_list sent. id->c02ae128-a98c-4809-8319-62df05c24646
beat: Waking up in 29.98 seconds.
Task crypto_prices.tasks.update_price_list[c02ae128-a98c-4809-8319-62df05c24646] received
TaskPool: Apply <function fast_trace_task at 0x7ec2201b4a60> (args:('crypto_prices.tasks.update_price_list', 'c02ae128-a98c-4809-8319-62df05c24646', {'lang': 'py', 'task': 'crypto_prices.tasks.update_price_list', 'id': 'c02ae128-a98c-4809-8319-62df05c24646', 'shadow': None, 'eta': None, 'expires': None, 'group': None, 'group_index': None, 'retries': 0, 'timelimit': [None, None], 'root_id': 'c02ae128-a98c-4809-8319-62df05c24646', 'parent_id': None, 'argsrepr': '()', 'kwargsrepr': '{}', 'origin': 'gen21820@haseeb-Dev', 'ignore_result': False, 'replaced_task_nesting': 0, 'stamped_headers': None, 'stamps': {}, 'properties': {'correlation_id': 'c02ae128-a98c-4809-8319-62df05c24646', 'reply_to': '485aab06-1181-319c-8f7e-3468dbf3713e', 'delivery_mode': 2, 'delivery_info': {'exchange': '', 'routing_key': 'celery'}, 'priority': 0, 'body_encoding': 'base64', 'delivery_tag': 'e94f787d-6943-4dd7-a7c9-d96aee58010f'}, 'reply_to': '485aab06-1181-319c-8f7e-3468dbf3713e', 'correlation_id': 'c02ae128-a98c-4809-8319-62df05c24646', 'hostname': 'celery@haseeb-Dev', 'delivery_info': {'exchange':... kwargs:{})
Fetching cryptocurrency prices from Coingecko API...
Starting new HTTPS connection (1): api.coingecko.com:443
https://api.coingecko.com:443 "GET /api/v3/simple/price?ids=bitcoin,solana,ethereum&vs_currencies=usd HTTP/1.1" 200 None
Received data from Coingecko API: {'bitcoin': {'usd': 64584}, 'ethereum': {'usd': 3364.11}, 'solana': {'usd': 176.56}}
Task crypto_prices.tasks.update_price_list[c02ae128-a98c-4809-8319-62df05c24646] raised unexpected: IntegrityError('NOT NULL constraint failed: crypto_prices_currency.crypto_prices_id')
Traceback (most recent call last):
  File "/home/haseeb/.local/lib/python3.10/site-packages/django/db/models/query.py", line 948, in get_or_create
    return self.get(**kwargs), False
  File "/home/haseeb/.local/lib/python3.10/site-packages/django/db/models/query.py", line 649, in get
    raise self.model.DoesNotExist(
crypto_prices.models.Currency.DoesNotExist: Currency matching query does not exist.

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/home/haseeb/.local/lib/python3.10/site-packages/django/db/backends/utils.py", line 105, in _execute
    return self.cursor.execute(sql, params)
  File "/home/haseeb/.local/lib/python3.10/site-packages/django/db/backends/sqlite3/base.py", line 329, in execute
    return super().execute(query, params)
sqlite3.IntegrityError: NOT NULL constraint failed: crypto_prices_currency.crypto_prices_id

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/home/haseeb/.local/lib/python3.10/site-packages/celery/app/trace.py", line 477, in trace_task
    R = retval = fun(*args, **kwargs)
  File "/home/haseeb/.local/lib/python3.10/site-packages/celery/app/trace.py", line 760, in __protected_call__
    return self.run(*args, **kwargs)
  File "/home/haseeb/crypto_prices_project/crypto_prices/tasks.py", line 24, in update_price_list
    currency, created = Currency.objects.update_or_create(
  File "/home/haseeb/.local/lib/python3.10/site-packages/django/db/models/manager.py", line 87, in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
  File "/home/haseeb/.local/lib/python3.10/site-packages/django/db/models/query.py", line 986, in update_or_create
    obj, created = self.select_for_update().get_or_create(
  File "/home/haseeb/.local/lib/python3.10/site-packages/django/db/models/query.py", line 955, in get_or_create
    return self.create(**params), True
  File "/home/haseeb/.local/lib/python3.10/site-packages/django/db/models/query.py", line 679, in create
    obj.save(force_insert=True, using=self.db)
  File "/home/haseeb/.local/lib/python3.10/site-packages/django/db/models/base.py", line 822, in save
    self.save_base(
  File "/home/haseeb/.local/lib/python3.10/site-packages/django/db/models/base.py", line 909, in save_base
    updated = self._save_table(
  File "/home/haseeb/.local/lib/python3.10/site-packages/django/db/models/base.py", line 1067, in _save_table
    results = self._do_insert(
  File "/home/haseeb/.local/lib/python3.10/site-packages/django/db/models/base.py", line 1108, in _do_insert
    return manager._insert(
  File "/home/haseeb/.local/lib/python3.10/site-packages/django/db/models/manager.py", line 87, in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
  File "/home/haseeb/.local/lib/python3.10/site-packages/django/db/models/query.py", line 1847, in _insert
    return query.get_compiler(using=using).execute_sql(returning_fields)
  File "/home/haseeb/.local/lib/python3.10/site-packages/django/db/models/sql/compiler.py", line 1823, in execute_sql
    cursor.execute(sql, params)
  File "/home/haseeb/.local/lib/python3.10/site-packages/django/db/backends/utils.py", line 122, in execute
    return super().execute(sql, params)
  File "/home/haseeb/.local/lib/python3.10/site-packages/django/db/backends/utils.py", line 79, in execute
    return self._execute_with_wrappers(
  File "/home/haseeb/.local/lib/python3.10/site-packages/django/db/backends/utils.py", line 92, in _execute_with_wrappers
    return executor(sql, params, many, context)
  File "/home/haseeb/.local/lib/python3.10/site-packages/django/db/backends/utils.py", line 100, in _execute
    with self.db.wrap_database_errors:
  File "/home/haseeb/.local/lib/python3.10/site-packages/django/db/utils.py", line 91, in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
  File "/home/haseeb/.local/lib/python3.10/site-packages/django/db/backends/utils.py", line 105, in _execute
    return self.cursor.execute(sql, params)
  File "/home/haseeb/.local/lib/python3.10/site-packages/django/db/backends/sqlite3/base.py", line 329, in execute
    return super().execute(query, params)
django.db.utils.IntegrityError: NOT NULL constraint failed: crypto_prices_currency.crypto_prices_id
/home/haseeb/crypto_prices_project/crypto_prices_project/settings.py changed, reloading.
Watching for file changes with StatReloader
| Worker: Closing Hub...
| Worker: Closing Pool...
| Worker: Closing Beat...
| Worker: Closing Consumer...
| Worker: Terminating Consumer...
| Consumer: Closing Connection...
| Consumer: Closing Events...
| Consumer: Closing Mingle...
| Consumer: Closing Tasks...
| Consumer: Closing Control...
| Consumer: Closing Gossip...
| Consumer: Closing Heart...
| Consumer: Closing event loop...
| Consumer: Stopping event loop...
| Consumer: Stopping Heart...
| Consumer: Stopping Gossip...
| Consumer: Stopping Control...
| Consumer: Stopping Tasks...
Canceling task consumer...
| Consumer: Stopping Mingle...
| Consumer: Stopping Events...
| Consumer: Stopping Connection...
| Worker: Terminating Beat...
| Worker: Terminating Pool...
removing tasks from inqueue until task handler finished
| Worker: Terminating Hub...
| Consumer: Shutdown Heart...
| Consumer: Shutdown Gossip...
| Consumer: Shutdown Control...
| Consumer: Shutdown Tasks...
Canceling task consumer...
Closing consumer channel...
| Consumer: Shutdown Events...
| Consumer: Shutdown Connection...
| Worker: Closing Hub...
| Worker: Closing Pool...
| Worker: Closing Consumer...
| Worker: Stopping Consumer...
| Consumer: Closing Connection...
| Consumer: Closing Events...
| Consumer: Closing Mingle...
| Consumer: Closing Gossip...
| Consumer: Closing Heart...
| Consumer: Closing Tasks...
| Consumer: Closing Control...
| Consumer: Closing event loop...
| Consumer: Stopping event loop...
| Consumer: Stopping Control...
| Consumer: Stopping Tasks...
Canceling task consumer...
| Consumer: Stopping Heart...
| Consumer: Stopping Gossip...
| Consumer: Stopping Mingle...
| Consumer: Stopping Events...
| Consumer: Stopping Connection...
| Worker: Stopping Pool...
| Worker: Stopping Hub...
| Consumer: Shutdown Control...
| Consumer: Shutdown Tasks...
Canceling task consumer...
Closing consumer channel...
| Consumer: Shutdown Heart...
| Consumer: Shutdown Gossip...
| Consumer: Shutdown Events...
| Consumer: Shutdown Connection...
removing tasks from inqueue until task handler finished
Watching for file changes with StatReloader

def backend_cleanup():
    return 1


def xstarmap(task, it):
    return 1


def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1


def accumulate(self, *args, **kwargs):
    return 1


def chunks(task, it, n):
    return 1


def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1


def update_price_list():
    return 1


def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1


def xmap(task, it):
    return 1


def chain(*args, **kwargs):
    return 1

| Worker: Preparing bootsteps.
| Worker: Building graph...
| Worker: New boot order: {Timer, Hub, Pool, Autoscaler, StateDB, Beat, Consumer}
| Consumer: Preparing bootsteps.
| Consumer: Building graph...
| Consumer: New boot order: {Connection, Events, Mingle, Tasks, Control, Agent, Heart, Gossip, event loop}
| Worker: Starting Hub
^-- substep ok
| Worker: Starting Pool
^-- substep ok
| Worker: Starting Beat
^-- substep ok
| Worker: Starting Consumer
| Consumer: Starting Connection
/home/haseeb/.local/lib/python3.10/site-packages/celery/worker/consumer/consumer.py:507: CPendingDeprecationWarning: The broker_connection_retry configuration setting will no longer determine
whether broker connection retries are made during startup in Celery 6.0 and above.
If you wish to retain the existing behavior for retrying connections on startup,
you should set broker_connection_retry_on_startup to True.
  warnings.warn(

Connected to redis://127.0.0.1:6379/0
^-- substep ok
| Consumer: Starting Events
/home/haseeb/.local/lib/python3.10/site-packages/celery/worker/consumer/consumer.py:507: CPendingDeprecationWarning: The broker_connection_retry configuration setting will no longer determine
whether broker connection retries are made during startup in Celery 6.0 and above.
If you wish to retain the existing behavior for retrying connections on startup,
you should set broker_connection_retry_on_startup to True.
  warnings.warn(

^-- substep ok
| Consumer: Starting Mingle
mingle: searching for neighbors
mingle: all alone
^-- substep ok
| Consumer: Starting Tasks
^-- substep ok
| Consumer: Starting Control
^-- substep ok
| Consumer: Starting Heart
^-- substep ok
| Consumer: Starting Gossip
^-- substep ok
| Consumer: Starting event loop
| Worker: Hub.register Pool...
celery@haseeb-Dev ready.
basic.qos: prefetch_count->32
beat: Starting...
Current schedule:
<ScheduleEntry: update_prices_every_30_seconds crypto_prices.tasks.update_price_list() <freq: 30.00 seconds>
<ScheduleEntry: celery.backend_cleanup celery.backend_cleanup() <crontab: 0 4 * * * (m/h/dM/MY/d)>
beat: Ticking with max interval->5.00 minutes
beat: Waking up in 8.20 seconds.
beat: Synchronizing schedule...
Scheduler: Sending due task update_prices_every_30_seconds (crypto_prices.tasks.update_price_list)
crypto_prices.tasks.update_price_list sent. id->5aaa4be1-7c22-40f2-ba1d-62b7bacf3155
beat: Waking up in 29.96 seconds.
Task crypto_prices.tasks.update_price_list[5aaa4be1-7c22-40f2-ba1d-62b7bacf3155] received
TaskPool: Apply <function fast_trace_task at 0x70aa455b8a60> (args:('crypto_prices.tasks.update_price_list', '5aaa4be1-7c22-40f2-ba1d-62b7bacf3155', {'lang': 'py', 'task': 'crypto_prices.tasks.update_price_list', 'id': '5aaa4be1-7c22-40f2-ba1d-62b7bacf3155', 'shadow': None, 'eta': None, 'expires': None, 'group': None, 'group_index': None, 'retries': 0, 'timelimit': [None, None], 'root_id': '5aaa4be1-7c22-40f2-ba1d-62b7bacf3155', 'parent_id': None, 'argsrepr': '()', 'kwargsrepr': '{}', 'origin': 'gen22648@haseeb-Dev', 'ignore_result': False, 'replaced_task_nesting': 0, 'stamped_headers': None, 'stamps': {}, 'properties': {'correlation_id': '5aaa4be1-7c22-40f2-ba1d-62b7bacf3155', 'reply_to': '1414baee-bfce-36ae-a084-444c29496e24', 'delivery_mode': 2, 'delivery_info': {'exchange': '', 'routing_key': 'celery'}, 'priority': 0, 'body_encoding': 'base64', 'delivery_tag': 'ad1cd1ba-657a-4fe0-b212-e849d1054675'}, 'reply_to': '1414baee-bfce-36ae-a084-444c29496e24', 'correlation_id': '5aaa4be1-7c22-40f2-ba1d-62b7bacf3155', 'hostname': 'celery@haseeb-Dev', 'delivery_info': {'exchange':... kwargs:{})
Fetching cryptocurrency prices from Coingecko API...
Starting new HTTPS connection (1): api.coingecko.com:443
https://api.coingecko.com:443 "GET /api/v3/simple/price?ids=bitcoin,solana,ethereum&vs_currencies=usd HTTP/1.1" 200 None
Received data from Coingecko API: {'bitcoin': {'usd': 64584}, 'ethereum': {'usd': 3364.11}, 'solana': {'usd': 176.56}}
Task crypto_prices.tasks.update_price_list[5aaa4be1-7c22-40f2-ba1d-62b7bacf3155] raised unexpected: IntegrityError('NOT NULL constraint failed: crypto_prices_currency.crypto_prices_id')
Traceback (most recent call last):
  File "/home/haseeb/.local/lib/python3.10/site-packages/django/db/models/query.py", line 948, in get_or_create
    return self.get(**kwargs), False
  File "/home/haseeb/.local/lib/python3.10/site-packages/django/db/models/query.py", line 649, in get
    raise self.model.DoesNotExist(
crypto_prices.models.Currency.DoesNotExist: Currency matching query does not exist.

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/home/haseeb/.local/lib/python3.10/site-packages/django/db/backends/utils.py", line 105, in _execute
    return self.cursor.execute(sql, params)
  File "/home/haseeb/.local/lib/python3.10/site-packages/django/db/backends/sqlite3/base.py", line 329, in execute
    return super().execute(query, params)
sqlite3.IntegrityError: NOT NULL constraint failed: crypto_prices_currency.crypto_prices_id

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/home/haseeb/.local/lib/python3.10/site-packages/celery/app/trace.py", line 477, in trace_task
    R = retval = fun(*args, **kwargs)
  File "/home/haseeb/.local/lib/python3.10/site-packages/celery/app/trace.py", line 760, in __protected_call__
    return self.run(*args, **kwargs)
  File "/home/haseeb/crypto_prices_project/crypto_prices/tasks.py", line 24, in update_price_list
    currency, created = Currency.objects.update_or_create(
  File "/home/haseeb/.local/lib/python3.10/site-packages/django/db/models/manager.py", line 87, in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
  File "/home/haseeb/.local/lib/python3.10/site-packages/django/db/models/query.py", line 986, in update_or_create
    obj, created = self.select_for_update().get_or_create(
  File "/home/haseeb/.local/lib/python3.10/site-packages/django/db/models/query.py", line 955, in get_or_create
    return self.create(**params), True
  File "/home/haseeb/.local/lib/python3.10/site-packages/django/db/models/query.py", line 679, in create
    obj.save(force_insert=True, using=self.db)
  File "/home/haseeb/.local/lib/python3.10/site-packages/django/db/models/base.py", line 822, in save
    self.save_base(
  File "/home/haseeb/.local/lib/python3.10/site-packages/django/db/models/base.py", line 909, in save_base
    updated = self._save_table(
  File "/home/haseeb/.local/lib/python3.10/site-packages/django/db/models/base.py", line 1067, in _save_table
    results = self._do_insert(
  File "/home/haseeb/.local/lib/python3.10/site-packages/django/db/models/base.py", line 1108, in _do_insert
    return manager._insert(
  File "/home/haseeb/.local/lib/python3.10/site-packages/django/db/models/manager.py", line 87, in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
  File "/home/haseeb/.local/lib/python3.10/site-packages/django/db/models/query.py", line 1847, in _insert
    return query.get_compiler(using=using).execute_sql(returning_fields)
  File "/home/haseeb/.local/lib/python3.10/site-packages/django/db/models/sql/compiler.py", line 1823, in execute_sql
    cursor.execute(sql, params)
  File "/home/haseeb/.local/lib/python3.10/site-packages/django/db/backends/utils.py", line 122, in execute
    return super().execute(sql, params)
  File "/home/haseeb/.local/lib/python3.10/site-packages/django/db/backends/utils.py", line 79, in execute
    return self._execute_with_wrappers(
  File "/home/haseeb/.local/lib/python3.10/site-packages/django/db/backends/utils.py", line 92, in _execute_with_wrappers
    return executor(sql, params, many, context)
  File "/home/haseeb/.local/lib/python3.10/site-packages/django/db/backends/utils.py", line 100, in _execute
    with self.db.wrap_database_errors:
  File "/home/haseeb/.local/lib/python3.10/site-packages/django/db/utils.py", line 91, in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
  File "/home/haseeb/.local/lib/python3.10/site-packages/django/db/backends/utils.py", line 105, in _execute
    return self.cursor.execute(sql, params)
  File "/home/haseeb/.local/lib/python3.10/site-packages/django/db/backends/sqlite3/base.py", line 329, in execute
    return super().execute(query, params)
django.db.utils.IntegrityError: NOT NULL constraint failed: crypto_prices_currency.crypto_prices_id
Scheduler: Sending due task update_prices_every_30_seconds (crypto_prices.tasks.update_price_list)
crypto_prices.tasks.update_price_list sent. id->1a932935-af27-4e93-b638-49dd9d134ac0
beat: Waking up in 29.99 seconds.
Task crypto_prices.tasks.update_price_list[1a932935-af27-4e93-b638-49dd9d134ac0] received
TaskPool: Apply <function fast_trace_task at 0x70aa455b8a60> (args:('crypto_prices.tasks.update_price_list', '1a932935-af27-4e93-b638-49dd9d134ac0', {'lang': 'py', 'task': 'crypto_prices.tasks.update_price_list', 'id': '1a932935-af27-4e93-b638-49dd9d134ac0', 'shadow': None, 'eta': None, 'expires': None, 'group': None, 'group_index': None, 'retries': 0, 'timelimit': [None, None], 'root_id': '1a932935-af27-4e93-b638-49dd9d134ac0', 'parent_id': None, 'argsrepr': '()', 'kwargsrepr': '{}', 'origin': 'gen22648@haseeb-Dev', 'ignore_result': False, 'replaced_task_nesting': 0, 'stamped_headers': None, 'stamps': {}, 'properties': {'correlation_id': '1a932935-af27-4e93-b638-49dd9d134ac0', 'reply_to': '1414baee-bfce-36ae-a084-444c29496e24', 'delivery_mode': 2, 'delivery_info': {'exchange': '', 'routing_key': 'celery'}, 'priority': 0, 'body_encoding': 'base64', 'delivery_tag': '4fe4318a-d422-4fc9-8064-50fdfc6b85cb'}, 'reply_to': '1414baee-bfce-36ae-a084-444c29496e24', 'correlation_id': '1a932935-af27-4e93-b638-49dd9d134ac0', 'hostname': 'celery@haseeb-Dev', 'delivery_info': {'exchange':... kwargs:{})
Fetching cryptocurrency prices from Coingecko API...
Starting new HTTPS connection (1): api.coingecko.com:443
https://api.coingecko.com:443 "GET /api/v3/simple/price?ids=bitcoin,solana,ethereum&vs_currencies=usd HTTP/1.1" 200 None
Received data from Coingecko API: {'bitcoin': {'usd': 64584}, 'ethereum': {'usd': 3364.11}, 'solana': {'usd': 176.56}}
Task crypto_prices.tasks.update_price_list[1a932935-af27-4e93-b638-49dd9d134ac0] raised unexpected: IntegrityError('NOT NULL constraint failed: crypto_prices_currency.crypto_prices_id')
Traceback (most recent call last):
  File "/home/haseeb/.local/lib/python3.10/site-packages/django/db/models/query.py", line 948, in get_or_create
    return self.get(**kwargs), False
  File "/home/haseeb/.local/lib/python3.10/site-packages/django/db/models/query.py", line 649, in get
    raise self.model.DoesNotExist(
crypto_prices.models.Currency.DoesNotExist: Currency matching query does not exist.

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/home/haseeb/.local/lib/python3.10/site-packages/django/db/backends/utils.py", line 105, in _execute
    return self.cursor.execute(sql, params)
  File "/home/haseeb/.local/lib/python3.10/site-packages/django/db/backends/sqlite3/base.py", line 329, in execute
    return super().execute(query, params)
sqlite3.IntegrityError: NOT NULL constraint failed: crypto_prices_currency.crypto_prices_id

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/home/haseeb/.local/lib/python3.10/site-packages/celery/app/trace.py", line 477, in trace_task
    R = retval = fun(*args, **kwargs)
  File "/home/haseeb/.local/lib/python3.10/site-packages/celery/app/trace.py", line 760, in __protected_call__
    return self.run(*args, **kwargs)
  File "/home/haseeb/crypto_prices_project/crypto_prices/tasks.py", line 24, in update_price_list
    currency, created = Currency.objects.update_or_create(
  File "/home/haseeb/.local/lib/python3.10/site-packages/django/db/models/manager.py", line 87, in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
  File "/home/haseeb/.local/lib/python3.10/site-packages/django/db/models/query.py", line 986, in update_or_create
    obj, created = self.select_for_update().get_or_create(
  File "/home/haseeb/.local/lib/python3.10/site-packages/django/db/models/query.py", line 955, in get_or_create
    return self.create(**params), True
  File "/home/haseeb/.local/lib/python3.10/site-packages/django/db/models/query.py", line 679, in create
    obj.save(force_insert=True, using=self.db)
  File "/home/haseeb/.local/lib/python3.10/site-packages/django/db/models/base.py", line 822, in save
    self.save_base(
  File "/home/haseeb/.local/lib/python3.10/site-packages/django/db/models/base.py", line 909, in save_base
    updated = self._save_table(
  File "/home/haseeb/.local/lib/python3.10/site-packages/django/db/models/base.py", line 1067, in _save_table
    results = self._do_insert(
  File "/home/haseeb/.local/lib/python3.10/site-packages/django/db/models/base.py", line 1108, in _do_insert
    return manager._insert(
  File "/home/haseeb/.local/lib/python3.10/site-packages/django/db/models/manager.py", line 87, in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
  File "/home/haseeb/.local/lib/python3.10/site-packages/django/db/models/query.py", line 1847, in _insert
    return query.get_compiler(using=using).execute_sql(returning_fields)
  File "/home/haseeb/.local/lib/python3.10/site-packages/django/db/models/sql/compiler.py", line 1823, in execute_sql
    cursor.execute(sql, params)
  File "/home/haseeb/.local/lib/python3.10/site-packages/django/db/backends/utils.py", line 122, in execute
    return super().execute(sql, params)
  File "/home/haseeb/.local/lib/python3.10/site-packages/django/db/backends/utils.py", line 79, in execute
    return self._execute_with_wrappers(
  File "/home/haseeb/.local/lib/python3.10/site-packages/django/db/backends/utils.py", line 92, in _execute_with_wrappers
    return executor(sql, params, many, context)
  File "/home/haseeb/.local/lib/python3.10/site-packages/django/db/backends/utils.py", line 100, in _execute
    with self.db.wrap_database_errors:
  File "/home/haseeb/.local/lib/python3.10/site-packages/django/db/utils.py", line 91, in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
  File "/home/haseeb/.local/lib/python3.10/site-packages/django/db/backends/utils.py", line 105, in _execute
    return self.cursor.execute(sql, params)
  File "/home/haseeb/.local/lib/python3.10/site-packages/django/db/backends/sqlite3/base.py", line 329, in execute
    return super().execute(query, params)
django.db.utils.IntegrityError: NOT NULL constraint failed: crypto_prices_currency.crypto_prices_id
Scheduler: Sending due task update_prices_every_30_seconds (crypto_prices.tasks.update_price_list)
crypto_prices.tasks.update_price_list sent. id->adc0850b-e941-4f77-8fc5-e95fdd29be7b
beat: Waking up in 29.98 seconds.
Task crypto_prices.tasks.update_price_list[adc0850b-e941-4f77-8fc5-e95fdd29be7b] received
TaskPool: Apply <function fast_trace_task at 0x70aa455b8a60> (args:('crypto_prices.tasks.update_price_list', 'adc0850b-e941-4f77-8fc5-e95fdd29be7b', {'lang': 'py', 'task': 'crypto_prices.tasks.update_price_list', 'id': 'adc0850b-e941-4f77-8fc5-e95fdd29be7b', 'shadow': None, 'eta': None, 'expires': None, 'group': None, 'group_index': None, 'retries': 0, 'timelimit': [None, None], 'root_id': 'adc0850b-e941-4f77-8fc5-e95fdd29be7b', 'parent_id': None, 'argsrepr': '()', 'kwargsrepr': '{}', 'origin': 'gen22648@haseeb-Dev', 'ignore_result': False, 'replaced_task_nesting': 0, 'stamped_headers': None, 'stamps': {}, 'properties': {'correlation_id': 'adc0850b-e941-4f77-8fc5-e95fdd29be7b', 'reply_to': '1414baee-bfce-36ae-a084-444c29496e24', 'delivery_mode': 2, 'delivery_info': {'exchange': '', 'routing_key': 'celery'}, 'priority': 0, 'body_encoding': 'base64', 'delivery_tag': '7fb488d3-c68a-489d-b894-1732992c6210'}, 'reply_to': '1414baee-bfce-36ae-a084-444c29496e24', 'correlation_id': 'adc0850b-e941-4f77-8fc5-e95fdd29be7b', 'hostname': 'celery@haseeb-Dev', 'delivery_info': {'exchange':... kwargs:{})
Fetching cryptocurrency prices from Coingecko API...
Starting new HTTPS connection (1): api.coingecko.com:443
https://api.coingecko.com:443 "GET /api/v3/simple/price?ids=bitcoin,solana,ethereum&vs_currencies=usd HTTP/1.1" 200 None
Received data from Coingecko API: {'bitcoin': {'usd': 64584}, 'ethereum': {'usd': 3364.11}, 'solana': {'usd': 176.56}}
Task crypto_prices.tasks.update_price_list[adc0850b-e941-4f77-8fc5-e95fdd29be7b] raised unexpected: IntegrityError('NOT NULL constraint failed: crypto_prices_currency.crypto_prices_id')
Traceback (most recent call last):
  File "/home/haseeb/.local/lib/python3.10/site-packages/django/db/models/query.py", line 948, in get_or_create
    return self.get(**kwargs), False
  File "/home/haseeb/.local/lib/python3.10/site-packages/django/db/models/query.py", line 649, in get
    raise self.model.DoesNotExist(
crypto_prices.models.Currency.DoesNotExist: Currency matching query does not exist.

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/home/haseeb/.local/lib/python3.10/site-packages/django/db/backends/utils.py", line 105, in _execute
    return self.cursor.execute(sql, params)
  File "/home/haseeb/.local/lib/python3.10/site-packages/django/db/backends/sqlite3/base.py", line 329, in execute
    return super().execute(query, params)
sqlite3.IntegrityError: NOT NULL constraint failed: crypto_prices_currency.crypto_prices_id

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/home/haseeb/.local/lib/python3.10/site-packages/celery/app/trace.py", line 477, in trace_task
    R = retval = fun(*args, **kwargs)
  File "/home/haseeb/.local/lib/python3.10/site-packages/celery/app/trace.py", line 760, in __protected_call__
    return self.run(*args, **kwargs)
  File "/home/haseeb/crypto_prices_project/crypto_prices/tasks.py", line 24, in update_price_list
    currency, created = Currency.objects.update_or_create(
  File "/home/haseeb/.local/lib/python3.10/site-packages/django/db/models/manager.py", line 87, in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
  File "/home/haseeb/.local/lib/python3.10/site-packages/django/db/models/query.py", line 986, in update_or_create
    obj, created = self.select_for_update().get_or_create(
  File "/home/haseeb/.local/lib/python3.10/site-packages/django/db/models/query.py", line 955, in get_or_create
    return self.create(**params), True
  File "/home/haseeb/.local/lib/python3.10/site-packages/django/db/models/query.py", line 679, in create
    obj.save(force_insert=True, using=self.db)
  File "/home/haseeb/.local/lib/python3.10/site-packages/django/db/models/base.py", line 822, in save
    self.save_base(
  File "/home/haseeb/.local/lib/python3.10/site-packages/django/db/models/base.py", line 909, in save_base
    updated = self._save_table(
  File "/home/haseeb/.local/lib/python3.10/site-packages/django/db/models/base.py", line 1067, in _save_table
    results = self._do_insert(
  File "/home/haseeb/.local/lib/python3.10/site-packages/django/db/models/base.py", line 1108, in _do_insert
    return manager._insert(
  File "/home/haseeb/.local/lib/python3.10/site-packages/django/db/models/manager.py", line 87, in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
  File "/home/haseeb/.local/lib/python3.10/site-packages/django/db/models/query.py", line 1847, in _insert
    return query.get_compiler(using=using).execute_sql(returning_fields)
  File "/home/haseeb/.local/lib/python3.10/site-packages/django/db/models/sql/compiler.py", line 1823, in execute_sql
    cursor.execute(sql, params)
  File "/home/haseeb/.local/lib/python3.10/site-packages/django/db/backends/utils.py", line 122, in execute
    return super().execute(sql, params)
  File "/home/haseeb/.local/lib/python3.10/site-packages/django/db/backends/utils.py", line 79, in execute
    return self._execute_with_wrappers(
  File "/home/haseeb/.local/lib/python3.10/site-packages/django/db/backends/utils.py", line 92, in _execute_with_wrappers
    return executor(sql, params, many, context)
  File "/home/haseeb/.local/lib/python3.10/site-packages/django/db/backends/utils.py", line 100, in _execute
    with self.db.wrap_database_errors:
  File "/home/haseeb/.local/lib/python3.10/site-packages/django/db/utils.py", line 91, in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
  File "/home/haseeb/.local/lib/python3.10/site-packages/django/db/backends/utils.py", line 105, in _execute
    return self.cursor.execute(sql, params)
  File "/home/haseeb/.local/lib/python3.10/site-packages/django/db/backends/sqlite3/base.py", line 329, in execute
    return super().execute(query, params)
django.db.utils.IntegrityError: NOT NULL constraint failed: crypto_prices_currency.crypto_prices_id
Scheduler: Sending due task update_prices_every_30_seconds (crypto_prices.tasks.update_price_list)
crypto_prices.tasks.update_price_list sent. id->283efad2-8566-4859-a1af-fe4d0382e314
beat: Waking up in 29.98 seconds.
Task crypto_prices.tasks.update_price_list[283efad2-8566-4859-a1af-fe4d0382e314] received
TaskPool: Apply <function fast_trace_task at 0x70aa455b8a60> (args:('crypto_prices.tasks.update_price_list', '283efad2-8566-4859-a1af-fe4d0382e314', {'lang': 'py', 'task': 'crypto_prices.tasks.update_price_list', 'id': '283efad2-8566-4859-a1af-fe4d0382e314', 'shadow': None, 'eta': None, 'expires': None, 'group': None, 'group_index': None, 'retries': 0, 'timelimit': [None, None], 'root_id': '283efad2-8566-4859-a1af-fe4d0382e314', 'parent_id': None, 'argsrepr': '()', 'kwargsrepr': '{}', 'origin': 'gen22648@haseeb-Dev', 'ignore_result': False, 'replaced_task_nesting': 0, 'stamped_headers': None, 'stamps': {}, 'properties': {'correlation_id': '283efad2-8566-4859-a1af-fe4d0382e314', 'reply_to': '1414baee-bfce-36ae-a084-444c29496e24', 'delivery_mode': 2, 'delivery_info': {'exchange': '', 'routing_key': 'celery'}, 'priority': 0, 'body_encoding': 'base64', 'delivery_tag': '03feb4ce-a4f1-4059-92c8-b87110151b4c'}, 'reply_to': '1414baee-bfce-36ae-a084-444c29496e24', 'correlation_id': '283efad2-8566-4859-a1af-fe4d0382e314', 'hostname': 'celery@haseeb-Dev', 'delivery_info': {'exchange':... kwargs:{})
Fetching cryptocurrency prices from Coingecko API...
Starting new HTTPS connection (1): api.coingecko.com:443
https://api.coingecko.com:443 "GET /api/v3/simple/price?ids=bitcoin,solana,ethereum&vs_currencies=usd HTTP/1.1" 200 None
Received data from Coingecko API: {'bitcoin': {'usd': 64584}, 'ethereum': {'usd': 3364.11}, 'solana': {'usd': 176.56}}
Task crypto_prices.tasks.update_price_list[283efad2-8566-4859-a1af-fe4d0382e314] raised unexpected: IntegrityError('NOT NULL constraint failed: crypto_prices_currency.crypto_prices_id')
Traceback (most recent call last):
  File "/home/haseeb/.local/lib/python3.10/site-packages/django/db/models/query.py", line 948, in get_or_create
    return self.get(**kwargs), False
  File "/home/haseeb/.local/lib/python3.10/site-packages/django/db/models/query.py", line 649, in get
    raise self.model.DoesNotExist(
crypto_prices.models.Currency.DoesNotExist: Currency matching query does not exist.

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/home/haseeb/.local/lib/python3.10/site-packages/django/db/backends/utils.py", line 105, in _execute
    return self.cursor.execute(sql, params)
  File "/home/haseeb/.local/lib/python3.10/site-packages/django/db/backends/sqlite3/base.py", line 329, in execute
    return super().execute(query, params)
sqlite3.IntegrityError: NOT NULL constraint failed: crypto_prices_currency.crypto_prices_id

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/home/haseeb/.local/lib/python3.10/site-packages/celery/app/trace.py", line 477, in trace_task
    R = retval = fun(*args, **kwargs)
  File "/home/haseeb/.local/lib/python3.10/site-packages/celery/app/trace.py", line 760, in __protected_call__
    return self.run(*args, **kwargs)
  File "/home/haseeb/crypto_prices_project/crypto_prices/tasks.py", line 24, in update_price_list
    crypto_prices=crypto_price,
  File "/home/haseeb/.local/lib/python3.10/site-packages/django/db/models/manager.py", line 87, in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
  File "/home/haseeb/.local/lib/python3.10/site-packages/django/db/models/query.py", line 986, in update_or_create
    obj, created = self.select_for_update().get_or_create(
  File "/home/haseeb/.local/lib/python3.10/site-packages/django/db/models/query.py", line 955, in get_or_create
    return self.create(**params), True
  File "/home/haseeb/.local/lib/python3.10/site-packages/django/db/models/query.py", line 679, in create
    obj.save(force_insert=True, using=self.db)
  File "/home/haseeb/.local/lib/python3.10/site-packages/django/db/models/base.py", line 822, in save
    self.save_base(
  File "/home/haseeb/.local/lib/python3.10/site-packages/django/db/models/base.py", line 909, in save_base
    updated = self._save_table(
  File "/home/haseeb/.local/lib/python3.10/site-packages/django/db/models/base.py", line 1067, in _save_table
    results = self._do_insert(
  File "/home/haseeb/.local/lib/python3.10/site-packages/django/db/models/base.py", line 1108, in _do_insert
    return manager._insert(
  File "/home/haseeb/.local/lib/python3.10/site-packages/django/db/models/manager.py", line 87, in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
  File "/home/haseeb/.local/lib/python3.10/site-packages/django/db/models/query.py", line 1847, in _insert
    return query.get_compiler(using=using).execute_sql(returning_fields)
  File "/home/haseeb/.local/lib/python3.10/site-packages/django/db/models/sql/compiler.py", line 1823, in execute_sql
    cursor.execute(sql, params)
  File "/home/haseeb/.local/lib/python3.10/site-packages/django/db/backends/utils.py", line 122, in execute
    return super().execute(sql, params)
  File "/home/haseeb/.local/lib/python3.10/site-packages/django/db/backends/utils.py", line 79, in execute
    return self._execute_with_wrappers(
  File "/home/haseeb/.local/lib/python3.10/site-packages/django/db/backends/utils.py", line 92, in _execute_with_wrappers
    return executor(sql, params, many, context)
  File "/home/haseeb/.local/lib/python3.10/site-packages/django/db/backends/utils.py", line 100, in _execute
    with self.db.wrap_database_errors:
  File "/home/haseeb/.local/lib/python3.10/site-packages/django/db/utils.py", line 91, in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
  File "/home/haseeb/.local/lib/python3.10/site-packages/django/db/backends/utils.py", line 105, in _execute
    return self.cursor.execute(sql, params)
  File "/home/haseeb/.local/lib/python3.10/site-packages/django/db/backends/sqlite3/base.py", line 329, in execute
    return super().execute(query, params)
django.db.utils.IntegrityError: NOT NULL constraint failed: crypto_prices_currency.crypto_prices_id
| Worker: Closing Hub...
| Worker: Closing Pool...
| Worker: Closing Beat...
| Worker: Closing Consumer...
| Worker: Terminating Consumer...
| Consumer: Closing Connection...
| Consumer: Closing Events...
| Consumer: Closing Mingle...
| Consumer: Closing Tasks...
| Consumer: Closing Control...
| Consumer: Closing Heart...
| Consumer: Closing Gossip...
| Consumer: Closing event loop...
| Consumer: Stopping event loop...
| Consumer: Stopping Gossip...
| Consumer: Stopping Heart...
| Consumer: Stopping Control...
| Consumer: Stopping Tasks...
Canceling task consumer...
| Consumer: Stopping Mingle...
| Consumer: Stopping Events...
| Consumer: Stopping Connection...
| Worker: Terminating Beat...
| Worker: Terminating Pool...
removing tasks from inqueue until task handler finished
| Worker: Terminating Hub...
| Consumer: Shutdown Gossip...
| Consumer: Shutdown Heart...
| Consumer: Shutdown Control...
| Consumer: Shutdown Tasks...
Canceling task consumer...
Closing consumer channel...
| Consumer: Shutdown Events...
| Consumer: Shutdown Connection...

def backend_cleanup():
    return 1


def xstarmap(task, it):
    return 1


def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1


def accumulate(self, *args, **kwargs):
    return 1


def chunks(task, it, n):
    return 1


def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1


def update_price_list():
    return 1


def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1


def xmap(task, it):
    return 1


def chain(*args, **kwargs):
    return 1

| Worker: Preparing bootsteps.
| Worker: Building graph...
| Worker: New boot order: {Beat, Timer, Hub, Pool, Autoscaler, StateDB, Consumer}
| Consumer: Preparing bootsteps.
| Consumer: Building graph...
| Consumer: New boot order: {Connection, Events, Mingle, Gossip, Heart, Tasks, Control, Agent, event loop}
| Worker: Starting Beat
^-- substep ok
| Worker: Starting Hub
^-- substep ok
| Worker: Starting Pool
^-- substep ok
| Worker: Starting Consumer
| Consumer: Starting Connection
/home/haseeb/.local/lib/python3.10/site-packages/celery/worker/consumer/consumer.py:507: CPendingDeprecationWarning: The broker_connection_retry configuration setting will no longer determine
whether broker connection retries are made during startup in Celery 6.0 and above.
If you wish to retain the existing behavior for retrying connections on startup,
you should set broker_connection_retry_on_startup to True.
  warnings.warn(

Connected to redis://127.0.0.1:6379/0
^-- substep ok
| Consumer: Starting Events
/home/haseeb/.local/lib/python3.10/site-packages/celery/worker/consumer/consumer.py:507: CPendingDeprecationWarning: The broker_connection_retry configuration setting will no longer determine
whether broker connection retries are made during startup in Celery 6.0 and above.
If you wish to retain the existing behavior for retrying connections on startup,
you should set broker_connection_retry_on_startup to True.
  warnings.warn(

^-- substep ok
| Consumer: Starting Mingle
mingle: searching for neighbors
beat: Starting...
Current schedule:
<ScheduleEntry: update_prices_every_30_seconds crypto_prices.tasks.update_price_list() <freq: 30.00 seconds>
<ScheduleEntry: celery.backend_cleanup celery.backend_cleanup() <crontab: 0 4 * * * (m/h/dM/MY/d)>
beat: Ticking with max interval->5.00 minutes
beat: Waking up in 14.43 seconds.
mingle: all alone
^-- substep ok
| Consumer: Starting Gossip
^-- substep ok
| Consumer: Starting Heart
^-- substep ok
| Consumer: Starting Tasks
^-- substep ok
| Consumer: Starting Control
^-- substep ok
| Consumer: Starting event loop
| Worker: Hub.register Pool...
celery@haseeb-Dev ready.
basic.qos: prefetch_count->32
Watching for file changes with StatReloader
| Worker: Closing Beat...
| Worker: Closing Hub...
| Worker: Closing Pool...
| Worker: Closing Consumer...
| Worker: Terminating Consumer...
| Consumer: Closing Connection...
| Consumer: Closing Events...
| Consumer: Closing Mingle...
| Consumer: Closing Gossip...
| Consumer: Closing Heart...
| Consumer: Closing Tasks...
| Consumer: Closing Control...
| Consumer: Closing event loop...
| Consumer: Stopping event loop...
| Consumer: Stopping Control...
| Consumer: Stopping Tasks...
Canceling task consumer...
| Consumer: Stopping Heart...
| Consumer: Stopping Gossip...
| Consumer: Stopping Mingle...
| Consumer: Stopping Events...
| Consumer: Stopping Connection...
| Worker: Terminating Pool...
removing tasks from inqueue until task handler finished
| Worker: Terminating Hub...
| Worker: Terminating Beat...
| Consumer: Shutdown Control...
| Consumer: Shutdown Tasks...
Canceling task consumer...
Closing consumer channel...
| Consumer: Shutdown Heart...
| Consumer: Shutdown Gossip...
| Consumer: Shutdown Events...
| Consumer: Shutdown Connection...

def backend_cleanup():
    return 1


def xstarmap(task, it):
    return 1


def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1


def accumulate(self, *args, **kwargs):
    return 1


def chunks(task, it, n):
    return 1


def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1


def update_price_list():
    return 1


def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1


def xmap(task, it):
    return 1


def chain(*args, **kwargs):
    return 1

| Worker: Preparing bootsteps.
| Worker: Building graph...
| Worker: New boot order: {StateDB, Beat, Timer, Hub, Pool, Autoscaler, Consumer}
| Consumer: Preparing bootsteps.
| Consumer: Building graph...
| Consumer: New boot order: {Connection, Agent, Events, Heart, Mingle, Tasks, Control, Gossip, event loop}
| Worker: Starting Beat
^-- substep ok
| Worker: Starting Hub
^-- substep ok
| Worker: Starting Pool
^-- substep ok
| Worker: Starting Consumer
| Consumer: Starting Connection
/home/haseeb/.local/lib/python3.10/site-packages/celery/worker/consumer/consumer.py:507: CPendingDeprecationWarning: The broker_connection_retry configuration setting will no longer determine
whether broker connection retries are made during startup in Celery 6.0 and above.
If you wish to retain the existing behavior for retrying connections on startup,
you should set broker_connection_retry_on_startup to True.
  warnings.warn(

Connected to redis://127.0.0.1:6379/0
^-- substep ok
| Consumer: Starting Events
/home/haseeb/.local/lib/python3.10/site-packages/celery/worker/consumer/consumer.py:507: CPendingDeprecationWarning: The broker_connection_retry configuration setting will no longer determine
whether broker connection retries are made during startup in Celery 6.0 and above.
If you wish to retain the existing behavior for retrying connections on startup,
you should set broker_connection_retry_on_startup to True.
  warnings.warn(

^-- substep ok
| Consumer: Starting Heart
^-- substep ok
| Consumer: Starting Mingle
mingle: searching for neighbors
beat: Starting...
Current schedule:
<ScheduleEntry: update_prices_every_30_seconds crypto_prices.tasks.update_price_list() <freq: 30.00 seconds>
<ScheduleEntry: celery.backend_cleanup celery.backend_cleanup() <crontab: 0 4 * * * (m/h/dM/MY/d)>
beat: Ticking with max interval->5.00 minutes
beat: Waking up in 1.58 seconds.
mingle: all alone
^-- substep ok
| Consumer: Starting Tasks
^-- substep ok
| Consumer: Starting Control
^-- substep ok
| Consumer: Starting Gossip
^-- substep ok
| Consumer: Starting event loop
| Worker: Hub.register Pool...
celery@haseeb-Dev ready.
basic.qos: prefetch_count->32
beat: Synchronizing schedule...
Scheduler: Sending due task update_prices_every_30_seconds (crypto_prices.tasks.update_price_list)
crypto_prices.tasks.update_price_list sent. id->b71ffb8e-df2e-492f-a2b1-c257b3c0f348
beat: Waking up in 29.96 seconds.
Task crypto_prices.tasks.update_price_list[b71ffb8e-df2e-492f-a2b1-c257b3c0f348] received
TaskPool: Apply <function fast_trace_task at 0x72553d3d0a60> (args:('crypto_prices.tasks.update_price_list', 'b71ffb8e-df2e-492f-a2b1-c257b3c0f348', {'lang': 'py', 'task': 'crypto_prices.tasks.update_price_list', 'id': 'b71ffb8e-df2e-492f-a2b1-c257b3c0f348', 'shadow': None, 'eta': None, 'expires': None, 'group': None, 'group_index': None, 'retries': 0, 'timelimit': [None, None], 'root_id': 'b71ffb8e-df2e-492f-a2b1-c257b3c0f348', 'parent_id': None, 'argsrepr': '()', 'kwargsrepr': '{}', 'origin': 'gen23343@haseeb-Dev', 'ignore_result': False, 'replaced_task_nesting': 0, 'stamped_headers': None, 'stamps': {}, 'properties': {'correlation_id': 'b71ffb8e-df2e-492f-a2b1-c257b3c0f348', 'reply_to': 'f2736c9c-f330-3946-b2d8-3dc41657689c', 'delivery_mode': 2, 'delivery_info': {'exchange': '', 'routing_key': 'celery'}, 'priority': 0, 'body_encoding': 'base64', 'delivery_tag': '1e8b93e5-229f-4970-a82c-75a7ee85a48e'}, 'reply_to': 'f2736c9c-f330-3946-b2d8-3dc41657689c', 'correlation_id': 'b71ffb8e-df2e-492f-a2b1-c257b3c0f348', 'hostname': 'celery@haseeb-Dev', 'delivery_info': {'exchange':... kwargs:{})
Fetching cryptocurrency prices from Coingecko API...
Task crypto_prices.tasks.update_price_list[b71ffb8e-df2e-492f-a2b1-c257b3c0f348] raised unexpected: NameError("name 'CryptoPrice' is not defined")
Traceback (most recent call last):
  File "/home/haseeb/.local/lib/python3.10/site-packages/celery/app/trace.py", line 477, in trace_task
    R = retval = fun(*args, **kwargs)
  File "/home/haseeb/.local/lib/python3.10/site-packages/celery/app/trace.py", line 760, in __protected_call__
    return self.run(*args, **kwargs)
  File "/home/haseeb/crypto_prices_project/crypto_prices/tasks.py", line 14, in update_price_list
    crypto_price = CryptoPrice.objects.create()
NameError: name 'CryptoPrice' is not defined
Watching for file changes with StatReloader
Scheduler: Sending due task update_prices_every_30_seconds (crypto_prices.tasks.update_price_list)
crypto_prices.tasks.update_price_list sent. id->754fe85f-31bf-4146-b1ba-1d401a493ffe
beat: Waking up in 29.98 seconds.
Task crypto_prices.tasks.update_price_list[754fe85f-31bf-4146-b1ba-1d401a493ffe] received
TaskPool: Apply <function fast_trace_task at 0x72553d3d0a60> (args:('crypto_prices.tasks.update_price_list', '754fe85f-31bf-4146-b1ba-1d401a493ffe', {'lang': 'py', 'task': 'crypto_prices.tasks.update_price_list', 'id': '754fe85f-31bf-4146-b1ba-1d401a493ffe', 'shadow': None, 'eta': None, 'expires': None, 'group': None, 'group_index': None, 'retries': 0, 'timelimit': [None, None], 'root_id': '754fe85f-31bf-4146-b1ba-1d401a493ffe', 'parent_id': None, 'argsrepr': '()', 'kwargsrepr': '{}', 'origin': 'gen23343@haseeb-Dev', 'ignore_result': False, 'replaced_task_nesting': 0, 'stamped_headers': None, 'stamps': {}, 'properties': {'correlation_id': '754fe85f-31bf-4146-b1ba-1d401a493ffe', 'reply_to': 'f2736c9c-f330-3946-b2d8-3dc41657689c', 'delivery_mode': 2, 'delivery_info': {'exchange': '', 'routing_key': 'celery'}, 'priority': 0, 'body_encoding': 'base64', 'delivery_tag': 'a89d1e9a-2218-430a-a30a-7b84cfb9977e'}, 'reply_to': 'f2736c9c-f330-3946-b2d8-3dc41657689c', 'correlation_id': '754fe85f-31bf-4146-b1ba-1d401a493ffe', 'hostname': 'celery@haseeb-Dev', 'delivery_info': {'exchange':... kwargs:{})
Fetching cryptocurrency prices from Coingecko API...
Task crypto_prices.tasks.update_price_list[754fe85f-31bf-4146-b1ba-1d401a493ffe] raised unexpected: NameError("name 'CryptoPrice' is not defined")
Traceback (most recent call last):
  File "/home/haseeb/.local/lib/python3.10/site-packages/celery/app/trace.py", line 477, in trace_task
    R = retval = fun(*args, **kwargs)
  File "/home/haseeb/.local/lib/python3.10/site-packages/celery/app/trace.py", line 760, in __protected_call__
    return self.run(*args, **kwargs)
  File "/home/haseeb/crypto_prices_project/crypto_prices/tasks.py", line 14, in update_price_list
    logger.debug("Fetching cryptocurrency prices from Coingecko API...")
NameError: name 'CryptoPrice' is not defined
| Worker: Closing Beat...
| Worker: Closing Hub...
| Worker: Closing Pool...
| Worker: Closing Consumer...
| Worker: Terminating Consumer...
| Consumer: Closing Connection...
| Consumer: Closing Events...
| Consumer: Closing Heart...
| Consumer: Closing Mingle...
| Consumer: Closing Tasks...
| Consumer: Closing Control...
| Consumer: Closing Gossip...
| Consumer: Closing event loop...
| Consumer: Stopping event loop...
| Consumer: Stopping Gossip...
| Consumer: Stopping Control...
| Consumer: Stopping Tasks...
Canceling task consumer...
| Consumer: Stopping Mingle...
| Consumer: Stopping Heart...
| Consumer: Stopping Events...
| Consumer: Stopping Connection...
| Worker: Terminating Pool...
removing tasks from inqueue until task handler finished
| Worker: Terminating Hub...
| Worker: Terminating Beat...
| Consumer: Shutdown Gossip...
| Consumer: Shutdown Control...
| Consumer: Shutdown Tasks...
Canceling task consumer...
Closing consumer channel...
| Consumer: Shutdown Heart...
| Consumer: Shutdown Events...
| Consumer: Shutdown Connection...

def backend_cleanup():
    return 1


def xstarmap(task, it):
    return 1


def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1


def accumulate(self, *args, **kwargs):
    return 1


def chunks(task, it, n):
    return 1


def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1


def update_price_list():
    return 1


def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1


def xmap(task, it):
    return 1


def chain(*args, **kwargs):
    return 1

| Worker: Preparing bootsteps.
| Worker: Building graph...
| Worker: New boot order: {StateDB, Beat, Timer, Hub, Pool, Autoscaler, Consumer}
| Consumer: Preparing bootsteps.
| Consumer: Building graph...
| Consumer: New boot order: {Connection, Agent, Events, Mingle, Tasks, Control, Heart, Gossip, event loop}
| Worker: Starting Beat
^-- substep ok
| Worker: Starting Hub
^-- substep ok
| Worker: Starting Pool
^-- substep ok
| Worker: Starting Consumer
| Consumer: Starting Connection
/home/haseeb/.local/lib/python3.10/site-packages/celery/worker/consumer/consumer.py:507: CPendingDeprecationWarning: The broker_connection_retry configuration setting will no longer determine
whether broker connection retries are made during startup in Celery 6.0 and above.
If you wish to retain the existing behavior for retrying connections on startup,
you should set broker_connection_retry_on_startup to True.
  warnings.warn(

Connected to redis://127.0.0.1:6379/0
^-- substep ok
| Consumer: Starting Events
/home/haseeb/.local/lib/python3.10/site-packages/celery/worker/consumer/consumer.py:507: CPendingDeprecationWarning: The broker_connection_retry configuration setting will no longer determine
whether broker connection retries are made during startup in Celery 6.0 and above.
If you wish to retain the existing behavior for retrying connections on startup,
you should set broker_connection_retry_on_startup to True.
  warnings.warn(

^-- substep ok
| Consumer: Starting Mingle
mingle: searching for neighbors
beat: Starting...
Current schedule:
<ScheduleEntry: update_prices_every_30_seconds crypto_prices.tasks.update_price_list() <freq: 30.00 seconds>
<ScheduleEntry: celery.backend_cleanup celery.backend_cleanup() <crontab: 0 4 * * * (m/h/dM/MY/d)>
beat: Ticking with max interval->5.00 minutes
beat: Waking up in 24.01 seconds.
mingle: all alone
^-- substep ok
| Consumer: Starting Tasks
^-- substep ok
| Consumer: Starting Control
^-- substep ok
| Consumer: Starting Heart
^-- substep ok
| Consumer: Starting Gossip
^-- substep ok
| Consumer: Starting event loop
| Worker: Hub.register Pool...
celery@haseeb-Dev ready.
basic.qos: prefetch_count->32
beat: Synchronizing schedule...
Scheduler: Sending due task update_prices_every_30_seconds (crypto_prices.tasks.update_price_list)
crypto_prices.tasks.update_price_list sent. id->b7c87366-a188-4be7-aa01-6a63d44fe484
beat: Waking up in 29.96 seconds.
Task crypto_prices.tasks.update_price_list[b7c87366-a188-4be7-aa01-6a63d44fe484] received
TaskPool: Apply <function fast_trace_task at 0x746689ad4a60> (args:('crypto_prices.tasks.update_price_list', 'b7c87366-a188-4be7-aa01-6a63d44fe484', {'lang': 'py', 'task': 'crypto_prices.tasks.update_price_list', 'id': 'b7c87366-a188-4be7-aa01-6a63d44fe484', 'shadow': None, 'eta': None, 'expires': None, 'group': None, 'group_index': None, 'retries': 0, 'timelimit': [None, None], 'root_id': 'b7c87366-a188-4be7-aa01-6a63d44fe484', 'parent_id': None, 'argsrepr': '()', 'kwargsrepr': '{}', 'origin': 'gen23610@haseeb-Dev', 'ignore_result': False, 'replaced_task_nesting': 0, 'stamped_headers': None, 'stamps': {}, 'properties': {'correlation_id': 'b7c87366-a188-4be7-aa01-6a63d44fe484', 'reply_to': '99bfbb62-3bdc-3d10-a883-a3d03262b776', 'delivery_mode': 2, 'delivery_info': {'exchange': '', 'routing_key': 'celery'}, 'priority': 0, 'body_encoding': 'base64', 'delivery_tag': '956eebac-acde-42c4-88be-c6bfba191833'}, 'reply_to': '99bfbb62-3bdc-3d10-a883-a3d03262b776', 'correlation_id': 'b7c87366-a188-4be7-aa01-6a63d44fe484', 'hostname': 'celery@haseeb-Dev', 'delivery_info': {'exchange':... kwargs:{})
Fetching cryptocurrency prices from Coingecko API...
Starting new HTTPS connection (1): api.coingecko.com:443
https://api.coingecko.com:443 "GET /api/v3/simple/price?ids=bitcoin,solana,ethereum&vs_currencies=usd HTTP/1.1" 200 None
Task crypto_prices.tasks.update_price_list[b7c87366-a188-4be7-aa01-6a63d44fe484] succeeded in 0.7262376190001305s: None
Scheduler: Sending due task update_prices_every_30_seconds (crypto_prices.tasks.update_price_list)
crypto_prices.tasks.update_price_list sent. id->7548a711-74f2-4a6e-a88f-c7cc399ac493
beat: Waking up in 29.98 seconds.
Task crypto_prices.tasks.update_price_list[7548a711-74f2-4a6e-a88f-c7cc399ac493] received
TaskPool: Apply <function fast_trace_task at 0x746689ad4a60> (args:('crypto_prices.tasks.update_price_list', '7548a711-74f2-4a6e-a88f-c7cc399ac493', {'lang': 'py', 'task': 'crypto_prices.tasks.update_price_list', 'id': '7548a711-74f2-4a6e-a88f-c7cc399ac493', 'shadow': None, 'eta': None, 'expires': None, 'group': None, 'group_index': None, 'retries': 0, 'timelimit': [None, None], 'root_id': '7548a711-74f2-4a6e-a88f-c7cc399ac493', 'parent_id': None, 'argsrepr': '()', 'kwargsrepr': '{}', 'origin': 'gen23610@haseeb-Dev', 'ignore_result': False, 'replaced_task_nesting': 0, 'stamped_headers': None, 'stamps': {}, 'properties': {'correlation_id': '7548a711-74f2-4a6e-a88f-c7cc399ac493', 'reply_to': '99bfbb62-3bdc-3d10-a883-a3d03262b776', 'delivery_mode': 2, 'delivery_info': {'exchange': '', 'routing_key': 'celery'}, 'priority': 0, 'body_encoding': 'base64', 'delivery_tag': '4c56ae69-b270-4c77-bdae-a46d375a3d98'}, 'reply_to': '99bfbb62-3bdc-3d10-a883-a3d03262b776', 'correlation_id': '7548a711-74f2-4a6e-a88f-c7cc399ac493', 'hostname': 'celery@haseeb-Dev', 'delivery_info': {'exchange':... kwargs:{})
Fetching cryptocurrency prices from Coingecko API...
Starting new HTTPS connection (1): api.coingecko.com:443
https://api.coingecko.com:443 "GET /api/v3/simple/price?ids=bitcoin,solana,ethereum&vs_currencies=usd HTTP/1.1" 200 None
Task crypto_prices.tasks.update_price_list[7548a711-74f2-4a6e-a88f-c7cc399ac493] succeeded in 1.2172334699998828s: None
| Worker: Closing Beat...
| Worker: Closing Hub...
| Worker: Closing Pool...
| Worker: Closing Consumer...
| Worker: Stopping Consumer...
| Consumer: Closing Connection...
| Consumer: Closing Events...
| Consumer: Closing Mingle...
| Consumer: Closing Tasks...
| Consumer: Closing Control...
| Consumer: Closing Heart...
| Consumer: Closing Gossip...
| Consumer: Closing event loop...
| Consumer: Stopping event loop...
| Consumer: Stopping Gossip...
| Consumer: Stopping Heart...
| Consumer: Stopping Control...
| Consumer: Stopping Tasks...
Canceling task consumer...
| Consumer: Stopping Mingle...
| Consumer: Stopping Events...
| Consumer: Stopping Connection...
| Worker: Stopping Pool...
| Worker: Stopping Hub...
| Worker: Stopping Beat...
beat: Shutting down...
| Consumer: Shutdown Gossip...
| Consumer: Shutdown Heart...
| Consumer: Shutdown Control...
| Consumer: Shutdown Tasks...
Canceling task consumer...
Closing consumer channel...
| Consumer: Shutdown Events...
| Consumer: Shutdown Connection...
removing tasks from inqueue until task handler finished
Watching for file changes with StatReloader

def backend_cleanup():
    return 1


def xstarmap(task, it):
    return 1


def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1


def accumulate(self, *args, **kwargs):
    return 1


def chunks(task, it, n):
    return 1


def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1


def update_price_list():
    return 1


def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1


def xmap(task, it):
    return 1


def chain(*args, **kwargs):
    return 1

| Worker: Preparing bootsteps.
| Worker: Building graph...
| Worker: New boot order: {StateDB, Timer, Hub, Pool, Autoscaler, Beat, Consumer}
| Consumer: Preparing bootsteps.
| Consumer: Building graph...
| Consumer: New boot order: {Connection, Agent, Events, Mingle, Tasks, Control, Heart, Gossip, event loop}
| Worker: Starting Hub
^-- substep ok
| Worker: Starting Pool
^-- substep ok
| Worker: Starting Consumer
| Consumer: Starting Connection
/home/haseeb/.local/lib/python3.10/site-packages/celery/worker/consumer/consumer.py:507: CPendingDeprecationWarning: The broker_connection_retry configuration setting will no longer determine
whether broker connection retries are made during startup in Celery 6.0 and above.
If you wish to retain the existing behavior for retrying connections on startup,
you should set broker_connection_retry_on_startup to True.
  warnings.warn(

Connected to redis://127.0.0.1:6379/0
^-- substep ok
| Consumer: Starting Events
/home/haseeb/.local/lib/python3.10/site-packages/celery/worker/consumer/consumer.py:507: CPendingDeprecationWarning: The broker_connection_retry configuration setting will no longer determine
whether broker connection retries are made during startup in Celery 6.0 and above.
If you wish to retain the existing behavior for retrying connections on startup,
you should set broker_connection_retry_on_startup to True.
  warnings.warn(

^-- substep ok
| Consumer: Starting Mingle
mingle: searching for neighbors
Starting new HTTPS connection (1): api.coingecko.com:443
mingle: all alone
^-- substep ok
| Consumer: Starting Tasks
^-- substep ok
| Consumer: Starting Control
^-- substep ok
| Consumer: Starting Heart
^-- substep ok
| Consumer: Starting Gossip
^-- substep ok
| Consumer: Starting event loop
| Worker: Hub.register Pool...
celery@haseeb-Dev ready.
https://api.coingecko.com:443 "GET /api/v3/simple/price?ids=bitcoin,solana,ethereum&vs_currencies=usd HTTP/1.1" 200 None
basic.qos: prefetch_count->32
Starting new HTTPS connection (1): api.coingecko.com:443
https://api.coingecko.com:443 "GET /api/v3/simple/price?ids=bitcoin,solana,ethereum&vs_currencies=usd HTTP/1.1" 200 None
/home/haseeb/crypto_prices_project/crypto_prices/views.py changed, reloading.
Watching for file changes with StatReloader
/home/haseeb/crypto_prices_project/crypto_prices/views.py changed, reloading.
Watching for file changes with StatReloader
/home/haseeb/crypto_prices_project/crypto_prices/views.py changed, reloading.
Watching for file changes with StatReloader
Watching for file changes with StatReloader
Starting new HTTPS connection (1): api.coingecko.com:443
https://api.coingecko.com:443 "GET /api/v3/simple/price?ids=bitcoin,solana,ethereum&vs_currencies=usd HTTP/1.1" 200 None
Starting new HTTPS connection (1): api.coingecko.com:443
https://api.coingecko.com:443 "GET /api/v3/simple/price?ids=bitcoin,solana,ethereum&vs_currencies=usd HTTP/1.1" 200 None
Internal Server Error: /
Traceback (most recent call last):
  File "/home/haseeb/.local/lib/python3.10/site-packages/django/core/handlers/exception.py", line 55, in inner
    response = get_response(request)
  File "/home/haseeb/.local/lib/python3.10/site-packages/django/core/handlers/base.py", line 197, in _get_response
    response = wrapped_callback(request, *callback_args, **callback_kwargs)
  File "/home/haseeb/crypto_prices_project/crypto_prices/views.py", line 30, in display_prices
    return render(request, 'prices.html', {'last_updated': last_updated.isoformat(),
AttributeError: 'CryptoPrice' object has no attribute 'isoformat'
/home/haseeb/crypto_prices_project/crypto_prices/views.py changed, reloading.
Watching for file changes with StatReloader
/home/haseeb/crypto_prices_project/crypto_prices/views.py changed, reloading.
Watching for file changes with StatReloader
Starting new HTTPS connection (1): api.coingecko.com:443
https://api.coingecko.com:443 "GET /api/v3/simple/price?ids=bitcoin,solana,ethereum&vs_currencies=usd HTTP/1.1" 200 None
Internal Server Error: /
Traceback (most recent call last):
  File "/home/haseeb/.local/lib/python3.10/site-packages/django/core/handlers/exception.py", line 55, in inner
    response = get_response(request)
  File "/home/haseeb/.local/lib/python3.10/site-packages/django/core/handlers/base.py", line 197, in _get_response
    response = wrapped_callback(request, *callback_args, **callback_kwargs)
  File "/home/haseeb/crypto_prices_project/crypto_prices/views.py", line 23, in display_prices
    last_updated_iso = last_updated.isoformat()  # Convert to ISO formatted string
AttributeError: 'CryptoPrice' object has no attribute 'isoformat'
/home/haseeb/crypto_prices_project/crypto_prices/views.py changed, reloading.
Watching for file changes with StatReloader
/home/haseeb/crypto_prices_project/crypto_prices/views.py changed, reloading.
Watching for file changes with StatReloader
/home/haseeb/crypto_prices_project/crypto_prices/views.py changed, reloading.
Watching for file changes with StatReloader
Starting new HTTPS connection (1): api.coingecko.com:443
https://api.coingecko.com:443 "GET /api/v3/simple/price?ids=bitcoin,solana,ethereum&vs_currencies=usd HTTP/1.1" 200 None
Starting new HTTPS connection (1): api.coingecko.com:443
https://api.coingecko.com:443 "GET /api/v3/simple/price?ids=bitcoin,solana,ethereum&vs_currencies=usd HTTP/1.1" 200 None
Starting new HTTPS connection (1): api.coingecko.com:443
Starting new HTTPS connection (1): api.coingecko.com:443
https://api.coingecko.com:443 "GET /api/v3/simple/price?ids=bitcoin,solana,ethereum&vs_currencies=usd HTTP/1.1" 200 None
Starting new HTTPS connection (1): api.coingecko.com:443
Starting new HTTPS connection (1): api.coingecko.com:443
Starting new HTTPS connection (1): api.coingecko.com:443
https://api.coingecko.com:443 "GET /api/v3/simple/price?ids=bitcoin,solana,ethereum&vs_currencies=usd HTTP/1.1" 200 None
Starting new HTTPS connection (1): api.coingecko.com:443
https://api.coingecko.com:443 "GET /api/v3/simple/price?ids=bitcoin,solana,ethereum&vs_currencies=usd HTTP/1.1" 200 None
https://api.coingecko.com:443 "GET /api/v3/simple/price?ids=bitcoin,solana,ethereum&vs_currencies=usd HTTP/1.1" 200 None
Starting new HTTPS connection (1): api.coingecko.com:443
https://api.coingecko.com:443 "GET /api/v3/simple/price?ids=bitcoin,solana,ethereum&vs_currencies=usd HTTP/1.1" 429 187
Internal Server Error: /
Traceback (most recent call last):
  File "/home/haseeb/.local/lib/python3.10/site-packages/django/core/handlers/exception.py", line 55, in inner
    response = get_response(request)
  File "/home/haseeb/.local/lib/python3.10/site-packages/django/core/handlers/base.py", line 197, in _get_response
    response = wrapped_callback(request, *callback_args, **callback_kwargs)
  File "/home/haseeb/crypto_prices_project/crypto_prices/views.py", line 21, in display_prices
    generate_dynamic_data()
  File "/home/haseeb/crypto_prices_project/crypto_prices/views.py", line 16, in generate_dynamic_data
    value=currency_data['usd']
KeyError: 'usd'
https://api.coingecko.com:443 "GET /api/v3/simple/price?ids=bitcoin,solana,ethereum&vs_currencies=usd HTTP/1.1" 429 187
https://api.coingecko.com:443 "GET /api/v3/simple/price?ids=bitcoin,solana,ethereum&vs_currencies=usd HTTP/1.1" 429 187
Starting new HTTPS connection (1): api.coingecko.com:443
https://api.coingecko.com:443 "GET /api/v3/simple/price?ids=bitcoin,solana,ethereum&vs_currencies=usd HTTP/1.1" 429 187
Internal Server Error: /
Traceback (most recent call last):
  File "/home/haseeb/.local/lib/python3.10/site-packages/django/core/handlers/exception.py", line 55, in inner
    response = get_response(request)
  File "/home/haseeb/.local/lib/python3.10/site-packages/django/core/handlers/base.py", line 197, in _get_response
    response = wrapped_callback(request, *callback_args, **callback_kwargs)
  File "/home/haseeb/crypto_prices_project/crypto_prices/views.py", line 21, in display_prices
    generate_dynamic_data()
  File "/home/haseeb/crypto_prices_project/crypto_prices/views.py", line 16, in generate_dynamic_data
    value=currency_data['usd']
KeyError: 'usd'
/home/haseeb/crypto_prices_project/crypto_prices/views.py changed, reloading.
Watching for file changes with StatReloader
/home/haseeb/crypto_prices_project/crypto_prices/views.py changed, reloading.
Watching for file changes with StatReloader
Starting new HTTPS connection (1): api.coingecko.com:443
https://api.coingecko.com:443 "GET /api/v3/simple/price?ids=bitcoin,solana,ethereum&vs_currencies=usd HTTP/1.1" 429 187
Internal Server Error: /
Traceback (most recent call last):
  File "/home/haseeb/.local/lib/python3.10/site-packages/django/core/handlers/exception.py", line 55, in inner
    response = get_response(request)
  File "/home/haseeb/.local/lib/python3.10/site-packages/django/core/handlers/base.py", line 197, in _get_response
    response = wrapped_callback(request, *callback_args, **callback_kwargs)
  File "/home/haseeb/crypto_prices_project/crypto_prices/views.py", line 21, in display_prices
    generate_dynamic_data()
  File "/home/haseeb/crypto_prices_project/crypto_prices/views.py", line 16, in generate_dynamic_data
    value=currency_data['usd']
KeyError: 'usd'
Starting new HTTPS connection (1): api.coingecko.com:443
https://api.coingecko.com:443 "GET /api/v3/simple/price?ids=bitcoin,solana,ethereum&vs_currencies=usd HTTP/1.1" 429 187
Internal Server Error: /
Traceback (most recent call last):
  File "/home/haseeb/.local/lib/python3.10/site-packages/django/core/handlers/exception.py", line 55, in inner
    response = get_response(request)
  File "/home/haseeb/.local/lib/python3.10/site-packages/django/core/handlers/base.py", line 197, in _get_response
    response = wrapped_callback(request, *callback_args, **callback_kwargs)
  File "/home/haseeb/crypto_prices_project/crypto_prices/views.py", line 21, in display_prices
    generate_dynamic_data()
  File "/home/haseeb/crypto_prices_project/crypto_prices/views.py", line 16, in generate_dynamic_data
    value=currency_data['usd']
KeyError: 'usd'
Watching for file changes with StatReloader
Starting new HTTPS connection (1): api.coingecko.com:443
https://api.coingecko.com:443 "GET /api/v3/simple/price?ids=bitcoin,solana,ethereum&vs_currencies=usd HTTP/1.1" 200 None
Starting new HTTPS connection (1): api.coingecko.com:443
https://api.coingecko.com:443 "GET /api/v3/simple/price?ids=bitcoin,solana,ethereum&vs_currencies=usd HTTP/1.1" 429 187
Internal Server Error: /
Traceback (most recent call last):
  File "/home/haseeb/.local/lib/python3.10/site-packages/django/core/handlers/exception.py", line 55, in inner
    response = get_response(request)
  File "/home/haseeb/.local/lib/python3.10/site-packages/django/core/handlers/base.py", line 197, in _get_response
    response = wrapped_callback(request, *callback_args, **callback_kwargs)
  File "/home/haseeb/crypto_prices_project/crypto_prices/views.py", line 21, in display_prices
    generate_dynamic_data()
  File "/home/haseeb/crypto_prices_project/crypto_prices/views.py", line 16, in generate_dynamic_data
    value=currency_data['usd']
KeyError: 'usd'
Starting new HTTPS connection (1): api.coingecko.com:443
https://api.coingecko.com:443 "GET /api/v3/simple/price?ids=bitcoin,solana,ethereum&vs_currencies=usd HTTP/1.1" 429 187
Internal Server Error: /
Traceback (most recent call last):
  File "/home/haseeb/.local/lib/python3.10/site-packages/django/core/handlers/exception.py", line 55, in inner
    response = get_response(request)
  File "/home/haseeb/.local/lib/python3.10/site-packages/django/core/handlers/base.py", line 197, in _get_response
    response = wrapped_callback(request, *callback_args, **callback_kwargs)
  File "/home/haseeb/crypto_prices_project/crypto_prices/views.py", line 21, in display_prices
    generate_dynamic_data()
  File "/home/haseeb/crypto_prices_project/crypto_prices/views.py", line 16, in generate_dynamic_data
    value=currency_data['usd']
KeyError: 'usd'
Starting new HTTPS connection (1): api.coingecko.com:443
https://api.coingecko.com:443 "GET /api/v3/simple/price?ids=bitcoin,solana,ethereum&vs_currencies=usd HTTP/1.1" 429 187
Internal Server Error: /
Traceback (most recent call last):
  File "/home/haseeb/.local/lib/python3.10/site-packages/django/core/handlers/exception.py", line 55, in inner
    response = get_response(request)
  File "/home/haseeb/.local/lib/python3.10/site-packages/django/core/handlers/base.py", line 197, in _get_response
    response = wrapped_callback(request, *callback_args, **callback_kwargs)
  File "/home/haseeb/crypto_prices_project/crypto_prices/views.py", line 21, in display_prices
    generate_dynamic_data()
  File "/home/haseeb/crypto_prices_project/crypto_prices/views.py", line 16, in generate_dynamic_data
    value=currency_data['usd']
KeyError: 'usd'
Starting new HTTPS connection (1): api.coingecko.com:443
https://api.coingecko.com:443 "GET /api/v3/simple/price?ids=bitcoin,solana,ethereum&vs_currencies=usd HTTP/1.1" 429 187
Internal Server Error: /
Traceback (most recent call last):
  File "/home/haseeb/.local/lib/python3.10/site-packages/django/core/handlers/exception.py", line 55, in inner
    response = get_response(request)
  File "/home/haseeb/.local/lib/python3.10/site-packages/django/core/handlers/base.py", line 197, in _get_response
    response = wrapped_callback(request, *callback_args, **callback_kwargs)
  File "/home/haseeb/crypto_prices_project/crypto_prices/views.py", line 21, in display_prices
    generate_dynamic_data()
  File "/home/haseeb/crypto_prices_project/crypto_prices/views.py", line 16, in generate_dynamic_data
    value=currency_data['usd']
KeyError: 'usd'
/home/haseeb/crypto_prices_project/crypto_prices/views.py changed, reloading.
Watching for file changes with StatReloader
/home/haseeb/crypto_prices_project/crypto_prices/views.py changed, reloading.
Watching for file changes with StatReloader
/home/haseeb/crypto_prices_project/crypto_prices/views.py changed, reloading.
Watching for file changes with StatReloader
/home/haseeb/crypto_prices_project/crypto_prices/views.py changed, reloading.
Watching for file changes with StatReloader
/home/haseeb/crypto_prices_project/crypto_prices/views.py changed, reloading.
Watching for file changes with StatReloader
/home/haseeb/crypto_prices_project/crypto_prices/views.py changed, reloading.
Watching for file changes with StatReloader
/home/haseeb/crypto_prices_project/crypto_prices_project/celery.py changed, reloading.
Watching for file changes with StatReloader
| Worker: Closing Hub...
| Worker: Closing Pool...
| Worker: Closing Consumer...
| Worker: Stopping Consumer...
| Consumer: Closing Connection...
| Consumer: Closing Events...
| Consumer: Closing Mingle...
| Consumer: Closing Tasks...
| Consumer: Closing Control...
| Consumer: Closing Heart...
| Consumer: Closing Gossip...
| Consumer: Closing event loop...
| Consumer: Stopping event loop...
| Consumer: Stopping Gossip...
| Consumer: Stopping Heart...
| Consumer: Stopping Control...
| Consumer: Stopping Tasks...
Canceling task consumer...
| Consumer: Stopping Mingle...
| Consumer: Stopping Events...
| Consumer: Stopping Connection...
| Worker: Stopping Pool...
| Worker: Stopping Hub...
| Consumer: Shutdown Gossip...
| Consumer: Shutdown Heart...
| Consumer: Shutdown Control...
| Consumer: Shutdown Tasks...
Canceling task consumer...
Closing consumer channel...
| Consumer: Shutdown Events...
| Consumer: Shutdown Connection...
removing tasks from inqueue until task handler finished

def backend_cleanup():
    return 1


def xstarmap(task, it):
    return 1


def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1


def accumulate(self, *args, **kwargs):
    return 1


def chunks(task, it, n):
    return 1


def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1


def update_price_list():
    return 1


def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1


def xmap(task, it):
    return 1


def chain(*args, **kwargs):
    return 1

| Worker: Preparing bootsteps.
| Worker: Building graph...
| Worker: New boot order: {Beat, Timer, Hub, Pool, Autoscaler, StateDB, Consumer}
| Consumer: Preparing bootsteps.
| Consumer: Building graph...
| Consumer: New boot order: {Connection, Events, Heart, Mingle, Gossip, Tasks, Control, Agent, event loop}
| Worker: Starting Hub
^-- substep ok
| Worker: Starting Pool
^-- substep ok
| Worker: Starting Consumer
| Consumer: Starting Connection
/home/haseeb/.local/lib/python3.10/site-packages/celery/worker/consumer/consumer.py:507: CPendingDeprecationWarning: The broker_connection_retry configuration setting will no longer determine
whether broker connection retries are made during startup in Celery 6.0 and above.
If you wish to retain the existing behavior for retrying connections on startup,
you should set broker_connection_retry_on_startup to True.
  warnings.warn(

Connected to redis://127.0.0.1:6379/0
^-- substep ok
| Consumer: Starting Events
/home/haseeb/.local/lib/python3.10/site-packages/celery/worker/consumer/consumer.py:507: CPendingDeprecationWarning: The broker_connection_retry configuration setting will no longer determine
whether broker connection retries are made during startup in Celery 6.0 and above.
If you wish to retain the existing behavior for retrying connections on startup,
you should set broker_connection_retry_on_startup to True.
  warnings.warn(

^-- substep ok
| Consumer: Starting Heart
^-- substep ok
| Consumer: Starting Mingle
mingle: searching for neighbors
mingle: all alone
^-- substep ok
| Consumer: Starting Gossip
^-- substep ok
| Consumer: Starting Tasks
^-- substep ok
| Consumer: Starting Control
^-- substep ok
| Consumer: Starting event loop
| Worker: Hub.register Pool...
celery@haseeb-Dev ready.
basic.qos: prefetch_count->32

def backend_cleanup():
    return 1


def xstarmap(task, it):
    return 1


def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1


def accumulate(self, *args, **kwargs):
    return 1


def chunks(task, it, n):
    return 1


def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1


def update_price_list():
    return 1


def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1


def xmap(task, it):
    return 1


def chain(*args, **kwargs):
    return 1

| Worker: Preparing bootsteps.
| Worker: Building graph...
| Worker: New boot order: {StateDB, Timer, Hub, Pool, Autoscaler, Beat, Consumer}
| Consumer: Preparing bootsteps.
| Consumer: Building graph...
| Consumer: New boot order: {Connection, Events, Mingle, Tasks, Control, Gossip, Heart, Agent, event loop}
| Worker: Starting Hub
^-- substep ok
| Worker: Starting Pool
^-- substep ok
| Worker: Starting Beat
^-- substep ok
| Worker: Starting Consumer
| Consumer: Starting Connection
/home/haseeb/.local/lib/python3.10/site-packages/celery/worker/consumer/consumer.py:507: CPendingDeprecationWarning: The broker_connection_retry configuration setting will no longer determine
whether broker connection retries are made during startup in Celery 6.0 and above.
If you wish to retain the existing behavior for retrying connections on startup,
you should set broker_connection_retry_on_startup to True.
  warnings.warn(

Connected to redis://127.0.0.1:6379/0
^-- substep ok
| Consumer: Starting Events
/home/haseeb/.local/lib/python3.10/site-packages/celery/worker/consumer/consumer.py:507: CPendingDeprecationWarning: The broker_connection_retry configuration setting will no longer determine
whether broker connection retries are made during startup in Celery 6.0 and above.
If you wish to retain the existing behavior for retrying connections on startup,
you should set broker_connection_retry_on_startup to True.
  warnings.warn(

^-- substep ok
| Consumer: Starting Mingle
mingle: searching for neighbors
pidbox received method hello(from_node='celery@haseeb-Dev', revoked={}) [reply_to:{'exchange': 'reply.celery.pidbox', 'routing_key': '0db3ddf7-6807-35eb-8c60-470b3998cecc'} ticket:f4f04d45-dbd5-4d5b-a2ae-001dd0730154]
beat: Starting...
mingle: all alone
^-- substep ok
| Consumer: Starting Tasks
Current schedule:
<ScheduleEntry: update_prices_every_30_seconds crypto_prices.tasks.update_price_list() <freq: 30.00 seconds>
<ScheduleEntry: celery.backend_cleanup celery.backend_cleanup() <crontab: 0 4 * * * (m/h/dM/MY/d)>
beat: Ticking with max interval->5.00 minutes
^-- substep ok
| Consumer: Starting Control
Scheduler: Sending due task update_prices_every_30_seconds (crypto_prices.tasks.update_price_list)
^-- substep ok
| Consumer: Starting Gossip
^-- substep ok
| Consumer: Starting Heart
beat: Synchronizing schedule...
crypto_prices.tasks.update_price_list sent. id->50eb96c8-4aab-42fa-b88c-25200f725070
beat: Waking up in 29.98 seconds.
^-- substep ok
| Consumer: Starting event loop
Task crypto_prices.tasks.update_price_list[50eb96c8-4aab-42fa-b88c-25200f725070] received
| Worker: Hub.register Pool...
TaskPool: Apply <function fast_trace_task at 0x7208ea3c8a60> (args:('crypto_prices.tasks.update_price_list', '50eb96c8-4aab-42fa-b88c-25200f725070', {'lang': 'py', 'task': 'crypto_prices.tasks.update_price_list', 'id': '50eb96c8-4aab-42fa-b88c-25200f725070', 'shadow': None, 'eta': None, 'expires': None, 'group': None, 'group_index': None, 'retries': 0, 'timelimit': [None, None], 'root_id': '50eb96c8-4aab-42fa-b88c-25200f725070', 'parent_id': None, 'argsrepr': '()', 'kwargsrepr': '{}', 'origin': 'gen25991@haseeb-Dev', 'ignore_result': False, 'replaced_task_nesting': 0, 'stamped_headers': None, 'stamps': {}, 'properties': {'correlation_id': '50eb96c8-4aab-42fa-b88c-25200f725070', 'reply_to': '4f050b0a-84da-358e-9088-8c773418bb0c', 'delivery_mode': 2, 'delivery_info': {'exchange': '', 'routing_key': 'celery'}, 'priority': 0, 'body_encoding': 'base64', 'delivery_tag': '6358a326-ab13-4abc-b292-2f64e21cae4c'}, 'reply_to': '4f050b0a-84da-358e-9088-8c773418bb0c', 'correlation_id': '50eb96c8-4aab-42fa-b88c-25200f725070', 'hostname': 'celery@haseeb-Dev', 'delivery_info': {'exchange':... kwargs:{})
celery@haseeb-Dev ready.
basic.qos: prefetch_count->32
Fetching cryptocurrency prices from Coingecko API...
Starting new HTTPS connection (1): api.coingecko.com:443
https://api.coingecko.com:443 "GET /api/v3/simple/price?ids=bitcoin,solana,ethereum&vs_currencies=usd HTTP/1.1" 200 None
Stored cryptocurrency prices from Coingecko API...
Task crypto_prices.tasks.update_price_list[50eb96c8-4aab-42fa-b88c-25200f725070] succeeded in 1.1510731770003986s: None
/home/haseeb/crypto_prices_project/crypto_prices_project/celery.py changed, reloading.
Watching for file changes with StatReloader
Scheduler: Sending due task update_prices_every_30_seconds (crypto_prices.tasks.update_price_list)
crypto_prices.tasks.update_price_list sent. id->6a058168-a5a9-4ce6-a221-7cc84cd11c99
beat: Waking up in 29.99 seconds.
Task crypto_prices.tasks.update_price_list[6a058168-a5a9-4ce6-a221-7cc84cd11c99] received
TaskPool: Apply <function fast_trace_task at 0x7125e8db8a60> (args:('crypto_prices.tasks.update_price_list', '6a058168-a5a9-4ce6-a221-7cc84cd11c99', {'lang': 'py', 'task': 'crypto_prices.tasks.update_price_list', 'id': '6a058168-a5a9-4ce6-a221-7cc84cd11c99', 'shadow': None, 'eta': None, 'expires': None, 'group': None, 'group_index': None, 'retries': 0, 'timelimit': [None, None], 'root_id': '6a058168-a5a9-4ce6-a221-7cc84cd11c99', 'parent_id': None, 'argsrepr': '()', 'kwargsrepr': '{}', 'origin': 'gen25991@haseeb-Dev', 'ignore_result': False, 'replaced_task_nesting': 0, 'stamped_headers': None, 'stamps': {}, 'properties': {'correlation_id': '6a058168-a5a9-4ce6-a221-7cc84cd11c99', 'reply_to': '4f050b0a-84da-358e-9088-8c773418bb0c', 'delivery_mode': 2, 'delivery_info': {'exchange': '', 'routing_key': 'celery'}, 'priority': 0, 'body_encoding': 'base64', 'delivery_tag': '414aeee3-afe5-46ee-b929-2a42c73cf562'}, 'reply_to': '4f050b0a-84da-358e-9088-8c773418bb0c', 'correlation_id': '6a058168-a5a9-4ce6-a221-7cc84cd11c99', 'hostname': 'celery@haseeb-Dev', 'delivery_info': {'exchange':... kwargs:{})
Fetching cryptocurrency prices from Coingecko API...
Starting new HTTPS connection (1): api.coingecko.com:443
https://api.coingecko.com:443 "GET /api/v3/simple/price?ids=bitcoin,solana,ethereum&vs_currencies=usd HTTP/1.1" 200 None
Stored cryptocurrency prices from Coingecko API...
Task crypto_prices.tasks.update_price_list[6a058168-a5a9-4ce6-a221-7cc84cd11c99] succeeded in 0.5919789130002755s: None
| Worker: Closing Hub...
| Worker: Closing Pool...
| Worker: Closing Beat...
| Worker: Closing Consumer...
| Worker: Terminating Consumer...
| Consumer: Closing Connection...
| Consumer: Closing Events...
| Consumer: Closing Mingle...
| Consumer: Closing Tasks...
| Consumer: Closing Control...
| Consumer: Closing Gossip...
| Consumer: Closing Heart...
| Consumer: Closing event loop...
| Consumer: Stopping event loop...
| Consumer: Stopping Heart...
| Consumer: Stopping Gossip...
| Consumer: Stopping Control...
| Consumer: Stopping Tasks...
Canceling task consumer...
| Consumer: Stopping Mingle...
| Consumer: Stopping Events...
| Consumer: Stopping Connection...
| Worker: Terminating Beat...
| Worker: Terminating Pool...
removing tasks from inqueue until task handler finished
| Worker: Terminating Hub...
| Consumer: Shutdown Heart...
| Consumer: Shutdown Gossip...
| Consumer: Shutdown Control...
| Consumer: Shutdown Tasks...
Canceling task consumer...
Closing consumer channel...
| Consumer: Shutdown Events...
| Consumer: Shutdown Connection...
| Worker: Closing Hub...
| Worker: Closing Pool...
| Worker: Closing Consumer...
| Worker: Terminating Consumer...
| Consumer: Closing Connection...
| Consumer: Closing Events...
| Consumer: Closing Heart...
| Consumer: Closing Mingle...
| Consumer: Closing Gossip...
| Consumer: Closing Tasks...
| Consumer: Closing Control...
| Consumer: Closing event loop...
| Consumer: Stopping event loop...
| Consumer: Stopping Control...
| Consumer: Stopping Tasks...
Canceling task consumer...
| Consumer: Stopping Gossip...
| Consumer: Stopping Mingle...
| Consumer: Stopping Heart...
| Consumer: Stopping Events...
| Consumer: Stopping Connection...
| Worker: Terminating Pool...
removing tasks from inqueue until task handler finished
| Worker: Terminating Hub...
| Consumer: Shutdown Control...
| Consumer: Shutdown Tasks...
Canceling task consumer...
Closing consumer channel...
| Consumer: Shutdown Gossip...
| Consumer: Shutdown Heart...
| Consumer: Shutdown Events...
| Consumer: Shutdown Connection...

def backend_cleanup():
    return 1


def xstarmap(task, it):
    return 1


def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1


def accumulate(self, *args, **kwargs):
    return 1


def chunks(task, it, n):
    return 1


def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1


def update_price_list():
    return 1


def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1


def xmap(task, it):
    return 1


def chain(*args, **kwargs):
    return 1

| Worker: Preparing bootsteps.
| Worker: Building graph...
| Worker: New boot order: {StateDB, Timer, Hub, Pool, Autoscaler, Beat, Consumer}
| Consumer: Preparing bootsteps.
| Consumer: Building graph...
| Consumer: New boot order: {Connection, Events, Heart, Mingle, Tasks, Control, Agent, Gossip, event loop}
| Worker: Starting Hub
^-- substep ok
| Worker: Starting Pool
^-- substep ok
| Worker: Starting Consumer
| Consumer: Starting Connection
/home/haseeb/.local/lib/python3.10/site-packages/celery/worker/consumer/consumer.py:507: CPendingDeprecationWarning: The broker_connection_retry configuration setting will no longer determine
whether broker connection retries are made during startup in Celery 6.0 and above.
If you wish to retain the existing behavior for retrying connections on startup,
you should set broker_connection_retry_on_startup to True.
  warnings.warn(

Connected to redis://127.0.0.1:6379/0
^-- substep ok
| Consumer: Starting Events
/home/haseeb/.local/lib/python3.10/site-packages/celery/worker/consumer/consumer.py:507: CPendingDeprecationWarning: The broker_connection_retry configuration setting will no longer determine
whether broker connection retries are made during startup in Celery 6.0 and above.
If you wish to retain the existing behavior for retrying connections on startup,
you should set broker_connection_retry_on_startup to True.
  warnings.warn(

^-- substep ok
| Consumer: Starting Heart
^-- substep ok
| Consumer: Starting Mingle
mingle: searching for neighbors
mingle: all alone
^-- substep ok
| Consumer: Starting Tasks
^-- substep ok
| Consumer: Starting Control
^-- substep ok
| Consumer: Starting Gossip
^-- substep ok
| Consumer: Starting event loop
| Worker: Hub.register Pool...
celery@haseeb-Dev ready.
basic.qos: prefetch_count->32

def backend_cleanup():
    return 1


def xstarmap(task, it):
    return 1


def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1


def accumulate(self, *args, **kwargs):
    return 1


def chunks(task, it, n):
    return 1


def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1


def update_price_list():
    return 1


def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1


def xmap(task, it):
    return 1


def chain(*args, **kwargs):
    return 1

| Worker: Preparing bootsteps.
| Worker: Building graph...
| Worker: New boot order: {StateDB, Timer, Hub, Pool, Autoscaler, Beat, Consumer}
| Consumer: Preparing bootsteps.
| Consumer: Building graph...
| Consumer: New boot order: {Connection, Agent, Events, Mingle, Tasks, Control, Heart, Gossip, event loop}
| Worker: Starting Hub
^-- substep ok
| Worker: Starting Pool
^-- substep ok
| Worker: Starting Beat
^-- substep ok
| Worker: Starting Consumer
| Consumer: Starting Connection
/home/haseeb/.local/lib/python3.10/site-packages/celery/worker/consumer/consumer.py:507: CPendingDeprecationWarning: The broker_connection_retry configuration setting will no longer determine
whether broker connection retries are made during startup in Celery 6.0 and above.
If you wish to retain the existing behavior for retrying connections on startup,
you should set broker_connection_retry_on_startup to True.
  warnings.warn(

Connected to redis://127.0.0.1:6379/0
^-- substep ok
| Consumer: Starting Events
/home/haseeb/.local/lib/python3.10/site-packages/celery/worker/consumer/consumer.py:507: CPendingDeprecationWarning: The broker_connection_retry configuration setting will no longer determine
whether broker connection retries are made during startup in Celery 6.0 and above.
If you wish to retain the existing behavior for retrying connections on startup,
you should set broker_connection_retry_on_startup to True.
  warnings.warn(

^-- substep ok
| Consumer: Starting Mingle
mingle: searching for neighbors
pidbox received method hello(from_node='celery@haseeb-Dev', revoked={}) [reply_to:{'exchange': 'reply.celery.pidbox', 'routing_key': '25584447-7ab6-37a5-8d54-434115d1df2b'} ticket:9438aa5b-3fe0-4460-853c-13d41f1bf2f4]
beat: Starting...
mingle: all alone
^-- substep ok
| Consumer: Starting Tasks
^-- substep ok
| Consumer: Starting Control
Current schedule:
<ScheduleEntry: update_prices_every_30_seconds crypto_prices.tasks.update_price_list() <freq: 5.00 minutes>
<ScheduleEntry: celery.backend_cleanup celery.backend_cleanup() <crontab: 0 4 * * * (m/h/dM/MY/d)>
beat: Ticking with max interval->5.00 minutes
beat: Waking up in 3.72 minutes.
^-- substep ok
| Consumer: Starting Heart
^-- substep ok
| Consumer: Starting Gossip
^-- substep ok
| Consumer: Starting event loop
| Worker: Hub.register Pool...
celery@haseeb-Dev ready.
basic.qos: prefetch_count->32
Watching for file changes with StatReloader
| Worker: Closing Hub...
| Worker: Closing Pool...
| Worker: Closing Beat...
| Worker: Closing Consumer...
| Worker: Terminating Consumer...
| Consumer: Closing Connection...
| Consumer: Closing Events...
| Consumer: Closing Mingle...
| Consumer: Closing Tasks...
| Consumer: Closing Control...
| Consumer: Closing Heart...
| Consumer: Closing Gossip...
| Consumer: Closing event loop...
| Consumer: Stopping event loop...
| Consumer: Stopping Gossip...
| Consumer: Stopping Heart...
| Consumer: Stopping Control...
| Consumer: Stopping Tasks...
Canceling task consumer...
| Consumer: Stopping Mingle...
| Consumer: Stopping Events...
| Consumer: Stopping Connection...
| Worker: Terminating Beat...
| Worker: Terminating Pool...
removing tasks from inqueue until task handler finished
| Worker: Terminating Hub...
| Consumer: Shutdown Gossip...
| Consumer: Shutdown Heart...
| Consumer: Shutdown Control...
| Consumer: Shutdown Tasks...
Canceling task consumer...
Closing consumer channel...
| Consumer: Shutdown Events...
| Consumer: Shutdown Connection...
| Worker: Closing Hub...
| Worker: Closing Pool...
| Worker: Closing Consumer...
| Worker: Terminating Consumer...
| Consumer: Closing Connection...
| Consumer: Closing Events...
| Consumer: Closing Heart...
| Consumer: Closing Mingle...
| Consumer: Closing Tasks...
| Consumer: Closing Control...
| Consumer: Closing Gossip...
| Consumer: Closing event loop...
| Consumer: Stopping event loop...
| Consumer: Stopping Gossip...
| Consumer: Stopping Control...
| Consumer: Stopping Tasks...
Canceling task consumer...
| Consumer: Stopping Mingle...
| Consumer: Stopping Heart...
| Consumer: Stopping Events...
| Consumer: Stopping Connection...
| Worker: Terminating Pool...
removing tasks from inqueue until task handler finished
| Worker: Terminating Hub...
| Consumer: Shutdown Gossip...
| Consumer: Shutdown Control...
| Consumer: Shutdown Tasks...
Canceling task consumer...
Closing consumer channel...
| Consumer: Shutdown Heart...
| Consumer: Shutdown Events...
| Consumer: Shutdown Connection...
